
STM32F401XX_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002830  08002830  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002830  08002830  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002830  08002830  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000074  080028ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080028ac  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002867  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b68  00000000  00000000  0002294e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000378  00000000  00000000  000234b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000285  00000000  00000000  00023830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f66  00000000  00000000  00023ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003c38  00000000  00000000  00027a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c37b  00000000  00000000  0002b653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000014b8  00000000  00000000  000379d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00038e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002740 	.word	0x08002740

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08002740 	.word	0x08002740

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ds1307_init>:


//if init returns 1 init failed
//if init returns 0 init passed
uint8_t ds1307_init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0

	//1. init the i2c pins
	ds1307_i2c_pin_config();
 8000286:	f000 f90f 	bl	80004a8 <ds1307_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds1307_i2c_config();
 800028a:	f000 f949 	bl	8000520 <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 800028e:	2101      	movs	r1, #1
 8000290:	4809      	ldr	r0, [pc, #36]	; (80002b8 <ds1307_init+0x38>)
 8000292:	f000 fde1 	bl	8000e58 <I2C_PeripheralControl>

	//4. Make clock halt = 0;
	ds1307_write(0x00,DS1307_ADDR_SEC);
 8000296:	2100      	movs	r1, #0
 8000298:	2000      	movs	r0, #0
 800029a:	f000 f957 	bl	800054c <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 f970 	bl	8000584 <ds1307_read>
 80002a4:	4603      	mov	r3, r0
 80002a6:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7 ) & 0x1);
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	09db      	lsrs	r3, r3, #7
 80002ac:	b2db      	uxtb	r3, r3

}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40005400 	.word	0x40005400

080002bc <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f979 	bl	80005c0 <binary_to_bcd>
 80002ce:	4603      	mov	r3, r0
 80002d0:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002d8:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 80002da:	7bbb      	ldrb	r3, [r7, #14]
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f934 	bl	800054c <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f969 	bl	80005c0 <binary_to_bcd>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2101      	movs	r1, #1
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f92a 	bl	800054c <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	789b      	ldrb	r3, [r3, #2]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 f95f 	bl	80005c0 <binary_to_bcd>
 8000302:	4603      	mov	r3, r0
 8000304:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	78db      	ldrb	r3, [r3, #3]
 800030a:	2b02      	cmp	r3, #2
 800030c:	d104      	bne.n	8000318 <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000314:	73fb      	strb	r3, [r7, #15]
 8000316:	e011      	b.n	800033c <ds1307_set_current_time+0x80>
	}else{
		hrs |= (1 << 6);
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800031e:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	78db      	ldrb	r3, [r3, #3]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d104      	bne.n	8000332 <ds1307_set_current_time+0x76>
 8000328:	7bfb      	ldrb	r3, [r7, #15]
 800032a:	f043 0320 	orr.w	r3, r3, #32
 800032e:	b2db      	uxtb	r3, r3
 8000330:	e003      	b.n	800033a <ds1307_set_current_time+0x7e>
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	f023 0320 	bic.w	r3, r3, #32
 8000338:	b2db      	uxtb	r3, r3
 800033a:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs,DS1307_ADDR_HRS);
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	2102      	movs	r1, #2
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f903 	bl	800054c <ds1307_write>

}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b082      	sub	sp, #8
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	4618      	mov	r0, r3
 800035c:	f000 f930 	bl	80005c0 <binary_to_bcd>
 8000360:	4603      	mov	r3, r0
 8000362:	2104      	movs	r1, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f8f1 	bl	800054c <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	785b      	ldrb	r3, [r3, #1]
 800036e:	4618      	mov	r0, r3
 8000370:	f000 f926 	bl	80005c0 <binary_to_bcd>
 8000374:	4603      	mov	r3, r0
 8000376:	2105      	movs	r1, #5
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f8e7 	bl	800054c <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	789b      	ldrb	r3, [r3, #2]
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f91c 	bl	80005c0 <binary_to_bcd>
 8000388:	4603      	mov	r3, r0
 800038a:	2106      	movs	r1, #6
 800038c:	4618      	mov	r0, r3
 800038e:	f000 f8dd 	bl	800054c <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	78db      	ldrb	r3, [r3, #3]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f912 	bl	80005c0 <binary_to_bcd>
 800039c:	4603      	mov	r3, r0
 800039e:	2103      	movs	r1, #3
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 f8d3 	bl	800054c <ds1307_write>

}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b084      	sub	sp, #16
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]

	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 80003b6:	2000      	movs	r0, #0
 80003b8:	f000 f8e4 	bl	8000584 <ds1307_read>
 80003bc:	4603      	mov	r3, r0
 80003be:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 80003c0:	7bbb      	ldrb	r3, [r7, #14]
 80003c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003c6:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 80003c8:	7bbb      	ldrb	r3, [r7, #14]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f924 	bl	8000618 <bcd_to_binary>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80003d8:	2001      	movs	r0, #1
 80003da:	f000 f8d3 	bl	8000584 <ds1307_read>
 80003de:	4603      	mov	r3, r0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f919 	bl	8000618 <bcd_to_binary>
 80003e6:	4603      	mov	r3, r0
 80003e8:	461a      	mov	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 80003ee:	2002      	movs	r0, #2
 80003f0:	f000 f8c8 	bl	8000584 <ds1307_read>
 80003f4:	4603      	mov	r3, r0
 80003f6:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d00f      	beq.n	8000422 <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	f003 0320 	and.w	r3, r3, #32
 8000408:	2b00      	cmp	r3, #0
 800040a:	bf14      	ite	ne
 800040c:	2301      	movne	r3, #1
 800040e:	2300      	moveq	r3, #0
 8000410:	b2db      	uxtb	r3, r3
 8000412:	461a      	mov	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800041e:	73fb      	strb	r3, [r7, #15]
 8000420:	e002      	b.n	8000428 <ds1307_get_current_time+0x7a>
	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2202      	movs	r2, #2
 8000426:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f8f4 	bl	8000618 <bcd_to_binary>
 8000430:	4603      	mov	r3, r0
 8000432:	461a      	mov	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	709a      	strb	r2, [r3, #2]
}
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	rtc_date->day =  bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000448:	2003      	movs	r0, #3
 800044a:	f000 f89b 	bl	8000584 <ds1307_read>
 800044e:	4603      	mov	r3, r0
 8000450:	4618      	mov	r0, r3
 8000452:	f000 f8e1 	bl	8000618 <bcd_to_binary>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 800045e:	2004      	movs	r0, #4
 8000460:	f000 f890 	bl	8000584 <ds1307_read>
 8000464:	4603      	mov	r3, r0
 8000466:	4618      	mov	r0, r3
 8000468:	f000 f8d6 	bl	8000618 <bcd_to_binary>
 800046c:	4603      	mov	r3, r0
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000474:	2005      	movs	r0, #5
 8000476:	f000 f885 	bl	8000584 <ds1307_read>
 800047a:	4603      	mov	r3, r0
 800047c:	4618      	mov	r0, r3
 800047e:	f000 f8cb 	bl	8000618 <bcd_to_binary>
 8000482:	4603      	mov	r3, r0
 8000484:	461a      	mov	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 800048a:	2006      	movs	r0, #6
 800048c:	f000 f87a 	bl	8000584 <ds1307_read>
 8000490:	4603      	mov	r3, r0
 8000492:	4618      	mov	r0, r3
 8000494:	f000 f8c0 	bl	8000618 <bcd_to_binary>
 8000498:	4603      	mov	r3, r0
 800049a:	461a      	mov	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	709a      	strb	r2, [r3, #2]

}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	220c      	movs	r2, #12
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 fb21 	bl	8001afe <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 80004bc:	463b      	mov	r3, r7
 80004be:	220c      	movs	r2, #12
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 fb1b 	bl	8001afe <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <ds1307_i2c_pin_config+0x74>)
 80004ca:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80004cc:	2304      	movs	r3, #4
 80004ce:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80004d0:	2302      	movs	r3, #2
 80004d2:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80004d4:	2307      	movs	r3, #7
 80004d6:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80004d8:	2301      	movs	r3, #1
 80004da:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80004dc:	2301      	movs	r3, #1
 80004de:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80004e0:	2302      	movs	r3, #2
 80004e2:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fab9 	bl	8000a60 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <ds1307_i2c_pin_config+0x74>)
 80004f0:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80004f2:	2304      	movs	r3, #4
 80004f4:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80004f6:	2302      	movs	r3, #2
 80004f8:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 80004fa:	2306      	movs	r3, #6
 80004fc:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80004fe:	2301      	movs	r3, #1
 8000500:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000502:	2301      	movs	r3, #1
 8000504:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000506:	2302      	movs	r3, #2
 8000508:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 800050a:	463b      	mov	r3, r7
 800050c:	4618      	mov	r0, r3
 800050e:	f000 faa7 	bl	8000a60 <GPIO_Init>

}
 8000512:	bf00      	nop
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020400 	.word	0x40020400

08000520 <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <ds1307_i2c_config+0x20>)
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <ds1307_i2c_config+0x24>)
 8000528:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <ds1307_i2c_config+0x20>)
 800052c:	2201      	movs	r2, #1
 800052e:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <ds1307_i2c_config+0x20>)
 8000532:	4a05      	ldr	r2, [pc, #20]	; (8000548 <ds1307_i2c_config+0x28>)
 8000534:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 8000536:	4802      	ldr	r0, [pc, #8]	; (8000540 <ds1307_i2c_config+0x20>)
 8000538:	f000 fcaa 	bl	8000e90 <I2C_Init>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000090 	.word	0x20000090
 8000544:	40005400 	.word	0x40005400
 8000548:	000186a0 	.word	0x000186a0

0800054c <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af02      	add	r7, sp, #8
 8000552:	4603      	mov	r3, r0
 8000554:	460a      	mov	r2, r1
 8000556:	71fb      	strb	r3, [r7, #7]
 8000558:	4613      	mov	r3, r2
 800055a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 800055c:	79bb      	ldrb	r3, [r7, #6]
 800055e:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000564:	f107 010c 	add.w	r1, r7, #12
 8000568:	2300      	movs	r3, #0
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2368      	movs	r3, #104	; 0x68
 800056e:	2202      	movs	r2, #2
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <ds1307_write+0x34>)
 8000572:	f000 fd97 	bl	80010a4 <I2C_MasterSendData>
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000090 	.word	0x20000090

08000584 <ds1307_read>:



static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 800058e:	1df9      	adds	r1, r7, #7
 8000590:	2300      	movs	r3, #0
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2368      	movs	r3, #104	; 0x68
 8000596:	2201      	movs	r2, #1
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <ds1307_read+0x38>)
 800059a:	f000 fd83 	bl	80010a4 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 800059e:	f107 010f 	add.w	r1, r7, #15
 80005a2:	2300      	movs	r3, #0
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2368      	movs	r3, #104	; 0x68
 80005a8:	2201      	movs	r2, #1
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <ds1307_read+0x38>)
 80005ac:	f000 fe5e 	bl	800126c <I2C_MasterReceiveData>

    return data;
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000090 	.word	0x20000090

080005c0 <binary_to_bcd>:



static uint8_t binary_to_bcd(uint8_t value)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b09      	cmp	r3, #9
 80005d2:	d918      	bls.n	8000606 <binary_to_bcd+0x46>
	{
		m = value /10;
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <binary_to_bcd+0x54>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	08db      	lsrs	r3, r3, #3
 80005de:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 80005e0:	79fa      	ldrb	r2, [r7, #7]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <binary_to_bcd+0x54>)
 80005e4:	fba3 1302 	umull	r1, r3, r3, r2
 80005e8:	08d9      	lsrs	r1, r3, #3
 80005ea:	460b      	mov	r3, r1
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	440b      	add	r3, r1
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	b25a      	sxtb	r2, r3
 80005fc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000600:	4313      	orrs	r3, r2
 8000602:	b25b      	sxtb	r3, r3
 8000604:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	cccccccd 	.word	0xcccccccd

08000618 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	091b      	lsrs	r3, r3, #4
 8000626:	b2db      	uxtb	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	0092      	lsls	r2, r2, #2
 800062c:	4413      	add	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 030f 	and.w	r3, r3, #15
 8000638:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	7bbb      	ldrb	r3, [r7, #14]
 800063e:	4413      	add	r3, r2
 8000640:	b2db      	uxtb	r3, r3
}
 8000642:	4618      	mov	r0, r3
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <lcd_send_command+0x40>)
 8000660:	f000 fb7c 	bl	8000d5c <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2101      	movs	r1, #1
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <lcd_send_command+0x40>)
 800066a:	f000 fb77 	bl	8000d5c <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f8cd 	bl	8000814 <write_4_bits>
	write_4_bits(cmd & 0x0F);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 030f 	and.w	r3, r3, #15
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f8c6 	bl	8000814 <write_4_bits>

}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020800 	.word	0x40020800

08000694 <lcd_print_char>:
void lcd_print_char(uint8_t data)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2100      	movs	r1, #0
 80006a2:	480c      	ldr	r0, [pc, #48]	; (80006d4 <lcd_print_char+0x40>)
 80006a4:	f000 fb5a 	bl	8000d5c <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <lcd_print_char+0x40>)
 80006ae:	f000 fb55 	bl	8000d5c <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);  /*Higher nibble*/
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	091b      	lsrs	r3, r3, #4
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f8ab 	bl	8000814 <write_4_bits>
	write_4_bits(data & 0x0F); /*Lower nibble*/
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f8a4 	bl	8000814 <write_4_bits>

}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40020800 	.word	0x40020800

080006d8 <lcd_print_string>:


void lcd_print_string(char *message)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

      do
      {
          lcd_print_char((uint8_t)*message++);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	607a      	str	r2, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffd3 	bl	8000694 <lcd_print_char>
      }
      while (*message != '\0');
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f4      	bne.n	80006e0 <lcd_print_string+0x8>

}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <lcd_init>:
void lcd_init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0

	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000706:	4b42      	ldr	r3, [pc, #264]	; (8000810 <lcd_init+0x110>)
 8000708:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800070a:	2301      	movs	r3, #1
 800070c:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 800070e:	2300      	movs	r3, #0
 8000710:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000712:	2300      	movs	r3, #0
 8000714:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000716:	2300      	movs	r3, #0
 8000718:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800071a:	2302      	movs	r3, #2
 800071c:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f99d 	bl	8000a60 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000726:	2301      	movs	r3, #1
 8000728:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f997 	bl	8000a60 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000732:	2302      	movs	r3, #2
 8000734:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f991 	bl	8000a60 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 800073e:	2303      	movs	r3, #3
 8000740:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f98b 	bl	8000a60 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 800074a:	2304      	movs	r3, #4
 800074c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f985 	bl	8000a60 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000756:	2305      	movs	r3, #5
 8000758:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f97f 	bl	8000a60 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000762:	2306      	movs	r3, #6
 8000764:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f979 	bl	8000a60 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	4827      	ldr	r0, [pc, #156]	; (8000810 <lcd_init+0x110>)
 8000774:	f000 faf2 	bl	8000d5c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2101      	movs	r1, #1
 800077c:	4824      	ldr	r0, [pc, #144]	; (8000810 <lcd_init+0x110>)
 800077e:	f000 faed 	bl	8000d5c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2102      	movs	r1, #2
 8000786:	4822      	ldr	r0, [pc, #136]	; (8000810 <lcd_init+0x110>)
 8000788:	f000 fae8 	bl	8000d5c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2103      	movs	r1, #3
 8000790:	481f      	ldr	r0, [pc, #124]	; (8000810 <lcd_init+0x110>)
 8000792:	f000 fae3 	bl	8000d5c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2104      	movs	r1, #4
 800079a:	481d      	ldr	r0, [pc, #116]	; (8000810 <lcd_init+0x110>)
 800079c:	f000 fade 	bl	8000d5c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2105      	movs	r1, #5
 80007a4:	481a      	ldr	r0, [pc, #104]	; (8000810 <lcd_init+0x110>)
 80007a6:	f000 fad9 	bl	8000d5c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2106      	movs	r1, #6
 80007ae:	4818      	ldr	r0, [pc, #96]	; (8000810 <lcd_init+0x110>)
 80007b0:	f000 fad4 	bl	8000d5c <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 80007b4:	2028      	movs	r0, #40	; 0x28
 80007b6:	f000 f885 	bl	80008c4 <mdelay>

	/*RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <lcd_init+0x110>)
 80007c0:	f000 facc 	bl	8000d5c <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2101      	movs	r1, #1
 80007c8:	4811      	ldr	r0, [pc, #68]	; (8000810 <lcd_init+0x110>)
 80007ca:	f000 fac7 	bl	8000d5c <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 80007ce:	2003      	movs	r0, #3
 80007d0:	f000 f820 	bl	8000814 <write_4_bits>

	mdelay(5);
 80007d4:	2005      	movs	r0, #5
 80007d6:	f000 f875 	bl	80008c4 <mdelay>

	write_4_bits(0x3);
 80007da:	2003      	movs	r0, #3
 80007dc:	f000 f81a 	bl	8000814 <write_4_bits>

	udelay(150);
 80007e0:	2096      	movs	r0, #150	; 0x96
 80007e2:	f000 f888 	bl	80008f6 <udelay>

	write_4_bits(0x3);
 80007e6:	2003      	movs	r0, #3
 80007e8:	f000 f814 	bl	8000814 <write_4_bits>
	write_4_bits(0x2);
 80007ec:	2002      	movs	r0, #2
 80007ee:	f000 f811 	bl	8000814 <write_4_bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 80007f2:	2028      	movs	r0, #40	; 0x28
 80007f4:	f7ff ff2c 	bl	8000650 <lcd_send_command>

	//disply ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 80007f8:	200e      	movs	r0, #14
 80007fa:	f7ff ff29 	bl	8000650 <lcd_send_command>

	lcd_display_clear();
 80007fe:	f000 f857 	bl	80008b0 <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 8000802:	2006      	movs	r0, #6
 8000804:	f7ff ff24 	bl	8000650 <lcd_send_command>



}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40020800 	.word	0x40020800

08000814 <write_4_bits>:

/* writes 4 bits of data/command on to D4,D5,D6,D7 lines */
static void write_4_bits(uint8_t value)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	2103      	movs	r1, #3
 800082a:	4815      	ldr	r0, [pc, #84]	; (8000880 <write_4_bits+0x6c>)
 800082c:	f000 fa96 	bl	8000d5c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	085b      	lsrs	r3, r3, #1
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	2104      	movs	r1, #4
 8000840:	480f      	ldr	r0, [pc, #60]	; (8000880 <write_4_bits+0x6c>)
 8000842:	f000 fa8b 	bl	8000d5c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	089b      	lsrs	r3, r3, #2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	2105      	movs	r1, #5
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <write_4_bits+0x6c>)
 8000858:	f000 fa80 	bl	8000d5c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	2106      	movs	r1, #6
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <write_4_bits+0x6c>)
 800086e:	f000 fa75 	bl	8000d5c <GPIO_WriteToOutputPin>

	lcd_enable();
 8000872:	f000 f807 	bl	8000884 <lcd_enable>

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40020800 	.word	0x40020800

08000884 <lcd_enable>:

static void lcd_enable(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2102      	movs	r1, #2
 800088c:	4807      	ldr	r0, [pc, #28]	; (80008ac <lcd_enable+0x28>)
 800088e:	f000 fa65 	bl	8000d5c <GPIO_WriteToOutputPin>
	udelay(10);
 8000892:	200a      	movs	r0, #10
 8000894:	f000 f82f 	bl	80008f6 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2102      	movs	r1, #2
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <lcd_enable+0x28>)
 800089e:	f000 fa5d 	bl	8000d5c <GPIO_WriteToOutputPin>
	udelay(100);/* execution time > 37 micro seconds */
 80008a2:	2064      	movs	r0, #100	; 0x64
 80008a4:	f000 f827 	bl	80008f6 <udelay>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40020800 	.word	0x40020800

080008b0 <lcd_display_clear>:

void lcd_display_clear(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fecb 	bl	8000650 <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(2);
 80008ba:	2002      	movs	r0, #2
 80008bc:	f000 f802 	bl	80008c4 <mdelay>
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <mdelay>:
    default:
      break;
  }
}
static void mdelay(uint32_t cnt)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e002      	b.n	80008d8 <mdelay+0x14>
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008de:	fb02 f303 	mul.w	r3, r2, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d3f4      	bcc.n	80008d2 <mdelay+0xe>
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <udelay>:

static void udelay(uint32_t cnt)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b085      	sub	sp, #20
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	e002      	b.n	800090a <udelay+0x14>
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	3301      	adds	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	d3f8      	bcc.n	8000904 <udelay+0xe>
}
 8000912:	bf00      	nop
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <GPIO_PeriClockControl>:

#include <STM32F401xx_GPIO_DRIVER.h>

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800092c:	78fb      	ldrb	r3, [r7, #3]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d141      	bne.n	80009b6 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <GPIO_PeriClockControl+0x124>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d106      	bne.n	8000948 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800093a:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a42      	ldr	r2, [pc, #264]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
				{
					GPIOH_PCLK_DI();
				}
	}

}
 8000946:	e077      	b.n	8000a38 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a40      	ldr	r2, [pc, #256]	; (8000a4c <GPIO_PeriClockControl+0x12c>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d106      	bne.n	800095e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000950:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a3c      	ldr	r2, [pc, #240]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800095c:	e06c      	b.n	8000a38 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a3b      	ldr	r2, [pc, #236]	; (8000a50 <GPIO_PeriClockControl+0x130>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d106      	bne.n	8000974 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000966:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a37      	ldr	r2, [pc, #220]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000972:	e061      	b.n	8000a38 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <GPIO_PeriClockControl+0x134>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d106      	bne.n	800098a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800097c:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	4a31      	ldr	r2, [pc, #196]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000988:	e056      	b.n	8000a38 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <GPIO_PeriClockControl+0x138>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d106      	bne.n	80009a0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a2c      	ldr	r2, [pc, #176]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800099e:	e04b      	b.n	8000a38 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a2e      	ldr	r2, [pc, #184]	; (8000a5c <GPIO_PeriClockControl+0x13c>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d147      	bne.n	8000a38 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 80009ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009b4:	e040      	b.n	8000a38 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <GPIO_PeriClockControl+0x124>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d106      	bne.n	80009cc <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 80009c4:	f023 0301 	bic.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ca:	e035      	b.n	8000a38 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOB)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <GPIO_PeriClockControl+0x12c>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d106      	bne.n	80009e2 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 80009da:	f023 0302 	bic.w	r3, r3, #2
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e0:	e02a      	b.n	8000a38 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOC)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <GPIO_PeriClockControl+0x130>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d106      	bne.n	80009f8 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 80009f0:	f023 0304 	bic.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f6:	e01f      	b.n	8000a38 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOD)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <GPIO_PeriClockControl+0x134>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d106      	bne.n	8000a0e <GPIO_PeriClockControl+0xee>
					GPIOD_PCLK_DI();
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000a06:	f023 0308 	bic.w	r3, r3, #8
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a0c:	e014      	b.n	8000a38 <GPIO_PeriClockControl+0x118>
				}else if (pGPIOx == GPIOE)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <GPIO_PeriClockControl+0x138>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d106      	bne.n	8000a24 <GPIO_PeriClockControl+0x104>
					GPIOE_PCLK_DI();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000a1c:	f023 0310 	bic.w	r3, r3, #16
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a22:	e009      	b.n	8000a38 <GPIO_PeriClockControl+0x118>
				}else if (pGPIOx == GPIOH)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <GPIO_PeriClockControl+0x13c>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d105      	bne.n	8000a38 <GPIO_PeriClockControl+0x118>
					GPIOH_PCLK_DI();
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <GPIO_PeriClockControl+0x128>)
 8000a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020c00 	.word	0x40020c00
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40021c00 	.word	0x40021c00

08000a60 <GPIO_Init>:



void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2101      	movs	r1, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff54 	bl	8000920 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	795b      	ldrb	r3, [r3, #5]
 8000a7c:	2b03      	cmp	r3, #3
 8000a7e:	d820      	bhi.n	8000ac2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	795b      	ldrb	r3, [r3, #5]
 8000a84:	461a      	mov	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	791b      	ldrb	r3, [r3, #4]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	400a      	ands	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6819      	ldr	r1, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	430a      	orrs	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e0a1      	b.n	8000c06 <GPIO_Init+0x1a6>

	}else
	{
		//this part will code later . ( interrupt mode)
				if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	795b      	ldrb	r3, [r3, #5]
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d117      	bne.n	8000afa <GPIO_Init+0x9a>
				{
					//1. configure the FTSR
					EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aca:	4b9b      	ldr	r3, [pc, #620]	; (8000d38 <GPIO_Init+0x2d8>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	7912      	ldrb	r2, [r2, #4]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	408a      	lsls	r2, r1
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4a97      	ldr	r2, [pc, #604]	; (8000d38 <GPIO_Init+0x2d8>)
 8000adc:	430b      	orrs	r3, r1
 8000ade:	60d3      	str	r3, [r2, #12]
					//Clear the corresponding RTSR bit
					EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ae0:	4b95      	ldr	r3, [pc, #596]	; (8000d38 <GPIO_Init+0x2d8>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	7912      	ldrb	r2, [r2, #4]
 8000ae8:	4611      	mov	r1, r2
 8000aea:	2201      	movs	r2, #1
 8000aec:	408a      	lsls	r2, r1
 8000aee:	43d2      	mvns	r2, r2
 8000af0:	4611      	mov	r1, r2
 8000af2:	4a91      	ldr	r2, [pc, #580]	; (8000d38 <GPIO_Init+0x2d8>)
 8000af4:	400b      	ands	r3, r1
 8000af6:	6093      	str	r3, [r2, #8]
 8000af8:	e035      	b.n	8000b66 <GPIO_Init+0x106>

				}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	795b      	ldrb	r3, [r3, #5]
 8000afe:	2b05      	cmp	r3, #5
 8000b00:	d117      	bne.n	8000b32 <GPIO_Init+0xd2>
				{
					//1 . configure the RTSR
					EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b02:	4b8d      	ldr	r3, [pc, #564]	; (8000d38 <GPIO_Init+0x2d8>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	7912      	ldrb	r2, [r2, #4]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	408a      	lsls	r2, r1
 8000b10:	4611      	mov	r1, r2
 8000b12:	4a89      	ldr	r2, [pc, #548]	; (8000d38 <GPIO_Init+0x2d8>)
 8000b14:	430b      	orrs	r3, r1
 8000b16:	6093      	str	r3, [r2, #8]
					//Clear the corresponding RTSR bit
					EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b18:	4b87      	ldr	r3, [pc, #540]	; (8000d38 <GPIO_Init+0x2d8>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	7912      	ldrb	r2, [r2, #4]
 8000b20:	4611      	mov	r1, r2
 8000b22:	2201      	movs	r2, #1
 8000b24:	408a      	lsls	r2, r1
 8000b26:	43d2      	mvns	r2, r2
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4a83      	ldr	r2, [pc, #524]	; (8000d38 <GPIO_Init+0x2d8>)
 8000b2c:	400b      	ands	r3, r1
 8000b2e:	60d3      	str	r3, [r2, #12]
 8000b30:	e019      	b.n	8000b66 <GPIO_Init+0x106>

				}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	795b      	ldrb	r3, [r3, #5]
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d115      	bne.n	8000b66 <GPIO_Init+0x106>
				{
					//1. configure both FTSR and RTSR
					EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b3a:	4b7f      	ldr	r3, [pc, #508]	; (8000d38 <GPIO_Init+0x2d8>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	7912      	ldrb	r2, [r2, #4]
 8000b42:	4611      	mov	r1, r2
 8000b44:	2201      	movs	r2, #1
 8000b46:	408a      	lsls	r2, r1
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4a7b      	ldr	r2, [pc, #492]	; (8000d38 <GPIO_Init+0x2d8>)
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	6093      	str	r3, [r2, #8]
					//Clear the corresponding RTSR bit
					EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b50:	4b79      	ldr	r3, [pc, #484]	; (8000d38 <GPIO_Init+0x2d8>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	7912      	ldrb	r2, [r2, #4]
 8000b58:	4611      	mov	r1, r2
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	408a      	lsls	r2, r1
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4a75      	ldr	r2, [pc, #468]	; (8000d38 <GPIO_Init+0x2d8>)
 8000b62:	430b      	orrs	r3, r1
 8000b64:	60d3      	str	r3, [r2, #12]
				}

				//2. configure the GPIO port selection in SYSCFG_EXTICR
				uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	791b      	ldrb	r3, [r3, #4]
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	74fb      	strb	r3, [r7, #19]
				uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	791b      	ldrb	r3, [r3, #4]
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	74bb      	strb	r3, [r7, #18]
				uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a6f      	ldr	r2, [pc, #444]	; (8000d3c <GPIO_Init+0x2dc>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d024      	beq.n	8000bcc <GPIO_Init+0x16c>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a6e      	ldr	r2, [pc, #440]	; (8000d40 <GPIO_Init+0x2e0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d01d      	beq.n	8000bc8 <GPIO_Init+0x168>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a6c      	ldr	r2, [pc, #432]	; (8000d44 <GPIO_Init+0x2e4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d016      	beq.n	8000bc4 <GPIO_Init+0x164>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a6b      	ldr	r2, [pc, #428]	; (8000d48 <GPIO_Init+0x2e8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00f      	beq.n	8000bc0 <GPIO_Init+0x160>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a69      	ldr	r2, [pc, #420]	; (8000d4c <GPIO_Init+0x2ec>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d008      	beq.n	8000bbc <GPIO_Init+0x15c>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a68      	ldr	r2, [pc, #416]	; (8000d50 <GPIO_Init+0x2f0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d101      	bne.n	8000bb8 <GPIO_Init+0x158>
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	e00a      	b.n	8000bce <GPIO_Init+0x16e>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e008      	b.n	8000bce <GPIO_Init+0x16e>
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	e006      	b.n	8000bce <GPIO_Init+0x16e>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	e004      	b.n	8000bce <GPIO_Init+0x16e>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	e002      	b.n	8000bce <GPIO_Init+0x16e>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e000      	b.n	8000bce <GPIO_Init+0x16e>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	747b      	strb	r3, [r7, #17]
				SYSCFG_PCLK_EN();
 8000bd0:	4b60      	ldr	r3, [pc, #384]	; (8000d54 <GPIO_Init+0x2f4>)
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd4:	4a5f      	ldr	r2, [pc, #380]	; (8000d54 <GPIO_Init+0x2f4>)
 8000bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bda:	6453      	str	r3, [r2, #68]	; 0x44
				SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000bdc:	7c7a      	ldrb	r2, [r7, #17]
 8000bde:	7cbb      	ldrb	r3, [r7, #18]
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	fa02 f103 	lsl.w	r1, r2, r3
 8000be6:	4a5c      	ldr	r2, [pc, #368]	; (8000d58 <GPIO_Init+0x2f8>)
 8000be8:	7cfb      	ldrb	r3, [r7, #19]
 8000bea:	3302      	adds	r3, #2
 8000bec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				//3 . enable the exti interrupt delivery using IMR
				EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000bf0:	4b51      	ldr	r3, [pc, #324]	; (8000d38 <GPIO_Init+0x2d8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	7912      	ldrb	r2, [r2, #4]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	408a      	lsls	r2, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4a4d      	ldr	r2, [pc, #308]	; (8000d38 <GPIO_Init+0x2d8>)
 8000c02:	430b      	orrs	r3, r1
 8000c04:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	799b      	ldrb	r3, [r3, #6]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	791b      	ldrb	r3, [r3, #4]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	791b      	ldrb	r3, [r3, #4]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2103      	movs	r1, #3
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	400a      	ands	r2, r1
 8000c34:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6899      	ldr	r1, [r3, #8]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	79db      	ldrb	r3, [r3, #7]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	791b      	ldrb	r3, [r3, #4]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	791b      	ldrb	r3, [r3, #4]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2103      	movs	r1, #3
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	400a      	ands	r2, r1
 8000c74:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68d9      	ldr	r1, [r3, #12]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7a1b      	ldrb	r3, [r3, #8]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	791b      	ldrb	r3, [r3, #4]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	408b      	lsls	r3, r1
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4619      	mov	r1, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	400a      	ands	r2, r1
 8000cb0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6859      	ldr	r1, [r3, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	795b      	ldrb	r3, [r3, #5]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d131      	bne.n	8000d2e <GPIO_Init+0x2ce>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	791b      	ldrb	r3, [r3, #4]
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	7c3a      	ldrb	r2, [r7, #16]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	220f      	movs	r2, #15
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	7c3a      	ldrb	r2, [r7, #16]
 8000cfc:	4001      	ands	r1, r0
 8000cfe:	3208      	adds	r2, #8
 8000d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	7c3a      	ldrb	r2, [r7, #16]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7a5b      	ldrb	r3, [r3, #9]
 8000d14:	461a      	mov	r2, r3
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	7c3a      	ldrb	r2, [r7, #16]
 8000d26:	4301      	orrs	r1, r0
 8000d28:	3208      	adds	r2, #8
 8000d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40013c00 	.word	0x40013c00
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40020400 	.word	0x40020400
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020c00 	.word	0x40020c00
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40021c00 	.word	0x40021c00
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40013800 	.word	0x40013800

08000d5c <GPIO_WriteToOutputPin>:

	return value;
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000d6c:	78bb      	ldrb	r3, [r7, #2]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d109      	bne.n	8000d86 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	78fa      	ldrb	r2, [r7, #3]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8000d84:	e009      	b.n	8000d9a <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	78fa      	ldrb	r2, [r7, #3]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d92:	43d2      	mvns	r2, r2
 8000d94:	401a      	ands	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	615a      	str	r2, [r3, #20]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <I2C_PeriClockControl>:
	pI2CHandle->pTxBuffer = NULL;
	pI2CHandle->TxLen = 0;
}

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d120      	bne.n	8000dfc <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <I2C_PeriClockControl+0xa0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d106      	bne.n	8000dd0 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000dc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
				{
					I2C3_PCLK_DI();
				}
	}

}
 8000dce:	e035      	b.n	8000e3c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <I2C_PeriClockControl+0xa8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d106      	bne.n	8000de6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000de4:	e02a      	b.n	8000e3c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a1a      	ldr	r2, [pc, #104]	; (8000e54 <I2C_PeriClockControl+0xac>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d126      	bne.n	8000e3c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dfa:	e01f      	b.n	8000e3c <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <I2C_PeriClockControl+0xa0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d106      	bne.n	8000e12 <I2C_PeriClockControl+0x6a>
					I2C1_PCLK_DI();
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000e0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e10:	e014      	b.n	8000e3c <I2C_PeriClockControl+0x94>
				}else if (pI2Cx == I2C2)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <I2C_PeriClockControl+0xa8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d106      	bne.n	8000e28 <I2C_PeriClockControl+0x80>
					I2C2_PCLK_DI();
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000e20:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e26:	e009      	b.n	8000e3c <I2C_PeriClockControl+0x94>
				}else if (pI2Cx == I2C3)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <I2C_PeriClockControl+0xac>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d105      	bne.n	8000e3c <I2C_PeriClockControl+0x94>
					I2C3_PCLK_DI();
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <I2C_PeriClockControl+0xa4>)
 8000e36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e3a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40005800 	.word	0x40005800
 8000e54:	40005c00 	.word	0x40005c00

08000e58 <I2C_PeripheralControl>:
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d106      	bne.n	8000e78 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f043 0201 	orr.w	r2, r3, #1
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000e76:	e005      	b.n	8000e84 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 0201 	bic.w	r2, r3, #1
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff80 	bl	8000da8 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7a5b      	ldrb	r3, [r3, #9]
 8000eac:	029b      	lsls	r3, r3, #10
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000ec2:	f000 f897 	bl	8000ff4 <RCC_GetPCLK1Value>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a47      	ldr	r2, [pc, #284]	; (8000fe8 <I2C_Init+0x158>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	0c9b      	lsrs	r3, r3, #18
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ee0:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7a1b      	ldrb	r3, [r3, #8]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	461a      	mov	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efa:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	4a36      	ldr	r2, [pc, #216]	; (8000fec <I2C_Init+0x15c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d80f      	bhi.n	8000f36 <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000f16:	f000 f86d 	bl	8000ff4 <RCC_GetPCLK1Value>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000f28:	897b      	ldrh	r3, [r7, #10]
 8000f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e02d      	b.n	8000f92 <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7a9b      	ldrb	r3, [r3, #10]
 8000f42:	039b      	lsls	r3, r3, #14
 8000f44:	461a      	mov	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7a9b      	ldrb	r3, [r3, #10]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10b      	bne.n	8000f6c <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000f54:	f000 f84e 	bl	8000ff4 <RCC_GetPCLK1Value>
 8000f58:	4601      	mov	r1, r0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f68:	817b      	strh	r3, [r7, #10]
 8000f6a:	e00c      	b.n	8000f86 <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000f6c:	f000 f842 	bl	8000ff4 <RCC_GetPCLK1Value>
 8000f70:	4601      	mov	r1, r0
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009a      	lsls	r2, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f84:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000f86:	897b      	ldrh	r3, [r7, #10]
 8000f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4a13      	ldr	r2, [pc, #76]	; (8000fec <I2C_Init+0x15c>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d809      	bhi.n	8000fb8 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000fa4:	f000 f826 	bl	8000ff4 <RCC_GetPCLK1Value>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <I2C_Init+0x158>)
 8000fac:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb0:	0c9b      	lsrs	r3, r3, #18
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e00d      	b.n	8000fd4 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000fb8:	f000 f81c 	bl	8000ff4 <RCC_GetPCLK1Value>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	0a5b      	lsrs	r3, r3, #9
 8000fc8:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <I2C_Init+0x160>)
 8000fca:	fba2 2303 	umull	r2, r3, r2, r3
 8000fce:	09db      	lsrs	r3, r3, #7
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000fde:	621a      	str	r2, [r3, #32]

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	431bde83 	.word	0x431bde83
 8000fec:	000186a0 	.word	0x000186a0
 8000ff0:	00044b83 	.word	0x00044b83

08000ff4 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint32_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR>>2)& 0x3);
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <RCC_GetPCLK1Value+0x9c>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	60bb      	str	r3, [r7, #8]

	if(clksrc==0)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <RCC_GetPCLK1Value+0x1e>
	{
		SystemClk=16000000;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <RCC_GetPCLK1Value+0xa0>)
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	e004      	b.n	800101c <RCC_GetPCLK1Value+0x28>
	}
	else if(clksrc==1)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <RCC_GetPCLK1Value+0x28>
	{
		SystemClk=8000000;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <RCC_GetPCLK1Value+0xa4>)
 800101a:	617b      	str	r3, [r7, #20]
	}
/////
	temp=((RCC->CFGR >> 4)& 0xf);
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <RCC_GetPCLK1Value+0x9c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	091b      	lsrs	r3, r3, #4
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	607b      	str	r3, [r7, #4]

	if(temp<8)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d802      	bhi.n	8001034 <RCC_GetPCLK1Value+0x40>
		{
			ahbp=1;
 800102e:	2301      	movs	r3, #1
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	e008      	b.n	8001046 <RCC_GetPCLK1Value+0x52>
		}
	else if(temp>=8)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b07      	cmp	r3, #7
 8001038:	d905      	bls.n	8001046 <RCC_GetPCLK1Value+0x52>
	{
		ahbp= AHB_PreScaler[temp-8];
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3b08      	subs	r3, #8
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <RCC_GetPCLK1Value+0xa8>)
 8001040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001044:	613b      	str	r3, [r7, #16]

	}
//////
	temp=((RCC->CFGR >> 10)& 0x7);
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <RCC_GetPCLK1Value+0x9c>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	0a9b      	lsrs	r3, r3, #10
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	607b      	str	r3, [r7, #4]

		if(temp<4)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d802      	bhi.n	800105e <RCC_GetPCLK1Value+0x6a>
			{
			apb1p=1;
 8001058:	2301      	movs	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e008      	b.n	8001070 <RCC_GetPCLK1Value+0x7c>
			}
		else if(temp>=8)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b07      	cmp	r3, #7
 8001062:	d905      	bls.n	8001070 <RCC_GetPCLK1Value+0x7c>
		{
			apb1p= APB1_PreScaler[temp-4];
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b04      	subs	r3, #4
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <RCC_GetPCLK1Value+0xac>)
 800106a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800106e:	60fb      	str	r3, [r7, #12]

		}

		pclk1= (SystemClk/ahbp)/apb1p;
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	fbb2 f2f3 	udiv	r2, r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	603b      	str	r3, [r7, #0]
	return pclk1;
 8001080:	683b      	ldr	r3, [r7, #0]
}
 8001082:	4618      	mov	r0, r3
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	00f42400 	.word	0x00f42400
 8001098:	007a1200 	.word	0x007a1200
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000010 	.word	0x20000010

080010a4 <I2C_MasterSendData>:
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f857 	bl	800116a <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 80010bc:	bf00      	nop
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2101      	movs	r1, #1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f870 	bl	80011aa <I2C_GetFlagStatus>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f6      	beq.n	80010be <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	78fa      	ldrb	r2, [r7, #3]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f87a 	bl	80011d2 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80010de:	bf00      	nop
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2102      	movs	r1, #2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f85f 	bl	80011aa <I2C_GetFlagStatus>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f6      	beq.n	80010e0 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 f883 	bl	80011fe <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 80010f8:	e014      	b.n	8001124 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 80010fa:	bf00      	nop
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f851 	bl	80011aa <I2C_GetFlagStatus>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f6      	beq.n	80010fc <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3301      	adds	r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
		Len--;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3b01      	subs	r3, #1
 8001122:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1e7      	bne.n	80010fa <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 800112a:	bf00      	nop
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f839 	bl	80011aa <I2C_GetFlagStatus>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f6      	beq.n	800112c <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 800113e:	bf00      	nop
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2104      	movs	r1, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f82f 	bl	80011aa <I2C_GetFlagStatus>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f6      	beq.n	8001140 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8001152:	7e3b      	ldrb	r3, [r7, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f814 	bl	800118a <I2C_GenerateStopCondition>

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <I2C_GenerateStartCondition>:
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <I2C_GenerateStopCondition>:
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	601a      	str	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695a      	ldr	r2, [r3, #20]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;//r/w
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	f023 0301 	bic.w	r3, r3, #1
 80011ea:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80011ec:	78fa      	ldrb	r2, [r7, #3]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	611a      	str	r2, [r3, #16]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d01f      	beq.n	8001254 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)//**************************************
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7f1b      	ldrb	r3, [r3, #28]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d112      	bne.n	8001242 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d11f      	bne.n	8001264 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f8b0 	bl	8001390 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8001240:	e010      	b.n	8001264 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	60fb      	str	r3, [r7, #12]
}
 8001252:	e007      	b.n	8001264 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	60fb      	str	r3, [r7, #12]
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	460b      	mov	r3, r1
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	4613      	mov	r3, r2
 8001280:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff6f 	bl	800116a <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 800128c:	bf00      	nop
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2101      	movs	r1, #1
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff88 	bl	80011aa <I2C_GetFlagStatus>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f6      	beq.n	800128e <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	79ba      	ldrb	r2, [r7, #6]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f88d 	bl	80013c8 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80012ae:	bf00      	nop
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2102      	movs	r1, #2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff77 	bl	80011aa <I2C_GetFlagStatus>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f6      	beq.n	80012b0 <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d121      	bne.n	800130c <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f85e 	bl	8001390 <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff ff92 	bl	80011fe <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 80012da:	bf00      	nop
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2140      	movs	r1, #64	; 0x40
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff61 	bl	80011aa <I2C_GetFlagStatus>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f6      	beq.n	80012dc <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 80012ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d104      	bne.n	8001300 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff45 	bl	800118a <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d930      	bls.n	8001374 <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7ff ff73 	bl	80011fe <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e027      	b.n	800136e <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 800131e:	bf00      	nop
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2140      	movs	r1, #64	; 0x40
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff3f 	bl	80011aa <I2C_GetFlagStatus>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f6      	beq.n	8001320 <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d10e      	bne.n	8001356 <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f826 	bl	8001390 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8001344:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d104      	bne.n	8001356 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff1a 	bl	800118a <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3301      	adds	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	3b01      	subs	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1d4      	bne.n	800131e <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7a5b      	ldrb	r3, [r3, #9]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d105      	bne.n	8001388 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f804 	bl	8001390 <I2C_ManageAcking>
	}

}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <I2C_ManageAcking>:
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d106      	bne.n	80013b0 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80013ae:	e005      	b.n	80013bc <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	611a      	str	r2, [r3, #16]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <init_systick_timer>:

#include "LCD.h"

#define SYSTICK_TIM_CLK   16000000UL
void init_systick_timer(uint32_t tick_hz)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <init_systick_timer+0x60>)
 80013fe:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <init_systick_timer+0x64>)
 8001402:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8001404:	4a15      	ldr	r2, [pc, #84]	; (800145c <init_systick_timer+0x68>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	fbb2 f3f3 	udiv	r3, r2, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	431a      	orrs	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f043 0202 	orr.w	r2, r3, #2
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f043 0204 	orr.w	r2, r3, #4
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f043 0201 	orr.w	r2, r3, #1
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	601a      	str	r2, [r3, #0]

}
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e014 	.word	0xe000e014
 8001458:	e000e010 	.word	0xe000e010
 800145c:	00f42400 	.word	0x00f42400

08001460 <get_day_of_week>:

char* get_day_of_week(uint8_t i)
{
 8001460:	b4b0      	push	{r4, r5, r7}
 8001462:	b08b      	sub	sp, #44	; 0x2c
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <get_day_of_week+0x38>)
 800146c:	f107 040c 	add.w	r4, r7, #12
 8001470:	461d      	mov	r5, r3
 8001472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001476:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800147a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	3b01      	subs	r3, #1
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	3328      	adds	r3, #40	; 0x28
 8001486:	443b      	add	r3, r7
 8001488:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800148c:	4618      	mov	r0, r3
 800148e:	372c      	adds	r7, #44	; 0x2c
 8001490:	46bd      	mov	sp, r7
 8001492:	bcb0      	pop	{r4, r5, r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	0800279c 	.word	0x0800279c

0800149c <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b09      	cmp	r3, #9
 80014ac:	d809      	bhi.n	80014c2 <number_to_string+0x26>
		buf[0] = '0';
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2230      	movs	r2, #48	; 0x30
 80014b2:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	79fa      	ldrb	r2, [r7, #7]
 80014ba:	3230      	adds	r2, #48	; 0x30
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 80014c0:	e01f      	b.n	8001502 <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b09      	cmp	r3, #9
 80014c6:	d91c      	bls.n	8001502 <number_to_string+0x66>
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b62      	cmp	r3, #98	; 0x62
 80014cc:	d819      	bhi.n	8001502 <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <number_to_string+0x74>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	08db      	lsrs	r3, r3, #3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3330      	adds	r3, #48	; 0x30
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <number_to_string+0x74>)
 80014e6:	fba3 1302 	umull	r1, r3, r3, r2
 80014ea:	08d9      	lsrs	r1, r3, #3
 80014ec:	460b      	mov	r3, r1
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	3230      	adds	r2, #48	; 0x30
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	cccccccd 	.word	0xcccccccd

08001514 <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <time_to_string+0x48>)
 800151e:	223a      	movs	r2, #58	; 0x3a
 8001520:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <time_to_string+0x48>)
 8001524:	223a      	movs	r2, #58	; 0x3a
 8001526:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	490b      	ldr	r1, [pc, #44]	; (800155c <time_to_string+0x48>)
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ffb4 	bl	800149c <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	785b      	ldrb	r3, [r3, #1]
 8001538:	4909      	ldr	r1, [pc, #36]	; (8001560 <time_to_string+0x4c>)
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ffae 	bl	800149c <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4907      	ldr	r1, [pc, #28]	; (8001564 <time_to_string+0x50>)
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ffa8 	bl	800149c <number_to_string>

	buf[8] = '\0';// string should end with null character
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <time_to_string+0x48>)
 800154e:	2200      	movs	r2, #0
 8001550:	721a      	strb	r2, [r3, #8]

	return buf;//cant return buf unless it is static
 8001552:	4b02      	ldr	r3, [pc, #8]	; (800155c <time_to_string+0x48>)

}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200000b8 	.word	0x200000b8
 8001560:	200000bb 	.word	0x200000bb
 8001564:	200000be 	.word	0x200000be

08001568 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <date_to_string+0x48>)
 8001572:	222f      	movs	r2, #47	; 0x2f
 8001574:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <date_to_string+0x48>)
 8001578:	222f      	movs	r2, #47	; 0x2f
 800157a:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	490b      	ldr	r1, [pc, #44]	; (80015b0 <date_to_string+0x48>)
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff8a 	bl	800149c <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	785b      	ldrb	r3, [r3, #1]
 800158c:	4909      	ldr	r1, [pc, #36]	; (80015b4 <date_to_string+0x4c>)
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff84 	bl	800149c <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	789b      	ldrb	r3, [r3, #2]
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <date_to_string+0x50>)
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff7e 	bl	800149c <number_to_string>

	buf[8]= '\0';
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <date_to_string+0x48>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	721a      	strb	r2, [r3, #8]

	return buf;
 80015a6:	4b02      	ldr	r3, [pc, #8]	; (80015b0 <date_to_string+0x48>)

}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200000c4 	.word	0x200000c4
 80015b4:	200000c7 	.word	0x200000c7
 80015b8:	200000ca 	.word	0x200000ca

080015bc <main>:
int main(void){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	//printf("RTC test \n");

	lcd_init();
 80015c2:	f7ff f89d 	bl	8000700 <lcd_init>

	lcd_print_string("rtc alks");
 80015c6:	4827      	ldr	r0, [pc, #156]	; (8001664 <main+0xa8>)
 80015c8:	f7ff f886 	bl	80006d8 <lcd_print_string>

	if(ds1307_init())
 80015cc:	f7fe fe58 	bl	8000280 <ds1307_init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d000      	beq.n	80015d8 <main+0x1c>
	{
		//printf("rtc init failed\n");
		while(1);
 80015d6:	e7fe      	b.n	80015d6 <main+0x1a>
	}

		init_systick_timer(1);
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff ff0b 	bl	80013f4 <init_systick_timer>
		current_date.day = FRIDAY;
 80015de:	2306      	movs	r3, #6
 80015e0:	71fb      	strb	r3, [r7, #7]
		current_date.date = 15;
 80015e2:	230f      	movs	r3, #15
 80015e4:	713b      	strb	r3, [r7, #4]
		current_date.month = 1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	717b      	strb	r3, [r7, #5]
		current_date.year = 21;
 80015ea:	2315      	movs	r3, #21
 80015ec:	71bb      	strb	r3, [r7, #6]

		current_time.hours = 4;
 80015ee:	2304      	movs	r3, #4
 80015f0:	72bb      	strb	r3, [r7, #10]
		current_time.minutes = 25;
 80015f2:	2319      	movs	r3, #25
 80015f4:	727b      	strb	r3, [r7, #9]
		current_time.seconds = 30;
 80015f6:	231e      	movs	r3, #30
 80015f8:	723b      	strb	r3, [r7, #8]
		current_time.time_format = TIME_FORMAT_12HRS_PM;
 80015fa:	2301      	movs	r3, #1
 80015fc:	72fb      	strb	r3, [r7, #11]

		ds1307_set_current_date(&current_date);
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe fea4 	bl	800034e <ds1307_set_current_date>
		ds1307_set_current_time(&current_time);
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe fe56 	bl	80002bc <ds1307_set_current_time>

		ds1307_get_current_time(&current_time);
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe feca 	bl	80003ae <ds1307_get_current_time>
		ds1307_get_current_date(&current_date);
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff0f 	bl	8000440 <ds1307_get_current_date>

		char *am_pm;
		if(current_time.time_format != TIME_FORMAT_24HRS)
 8001622:	7afb      	ldrb	r3, [r7, #11]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d013      	beq.n	8001650 <main+0x94>
		{
			am_pm = (current_time.time_format) ? "PM" : "AM";
 8001628:	7afb      	ldrb	r3, [r7, #11]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <main+0x76>
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <main+0xac>)
 8001630:	e000      	b.n	8001634 <main+0x78>
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <main+0xb0>)
 8001634:	60fb      	str	r3, [r7, #12]
			//printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
			lcd_print_string(time_to_string(&current_time));
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff6a 	bl	8001514 <time_to_string>
 8001640:	4603      	mov	r3, r0
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f848 	bl	80006d8 <lcd_print_string>
			lcd_print_string(am_pm);
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff f845 	bl	80006d8 <lcd_print_string>
 800164e:	e008      	b.n	8001662 <main+0xa6>
		}
		else
		{
			//printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
			lcd_print_string(time_to_string(&current_time));
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <time_to_string>
 800165a:	4603      	mov	r3, r0
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f83b 	bl	80006d8 <lcd_print_string>

		}

		while(1);
 8001662:	e7fe      	b.n	8001662 <main+0xa6>
 8001664:	080027b8 	.word	0x080027b8
 8001668:	080027c4 	.word	0x080027c4
 800166c:	080027c8 	.word	0x080027c8

08001670 <SysTick_Handler>:
	return 0;
}
void SysTick_Handler(void)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fe97 	bl	80003ae <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d012      	beq.n	80016ac <SysTick_Handler+0x3c>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8001686:	7afb      	ldrb	r3, [r7, #11]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SysTick_Handler+0x20>
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <SysTick_Handler+0x64>)
 800168e:	e000      	b.n	8001692 <SysTick_Handler+0x22>
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <SysTick_Handler+0x68>)
 8001692:	60fb      	str	r3, [r7, #12]
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff3b 	bl	8001514 <time_to_string>
 800169e:	4603      	mov	r3, r0
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4619      	mov	r1, r3
 80016a4:	480d      	ldr	r0, [pc, #52]	; (80016dc <SysTick_Handler+0x6c>)
 80016a6:	f000 f9d5 	bl	8001a54 <iprintf>
	}
	else
	{
		printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
	}
}
 80016aa:	e00e      	b.n	80016ca <SysTick_Handler+0x5a>
		printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff5a 	bl	8001568 <date_to_string>
 80016b4:	4604      	mov	r4, r0
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fed1 	bl	8001460 <get_day_of_week>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4621      	mov	r1, r4
 80016c4:	4806      	ldr	r0, [pc, #24]	; (80016e0 <SysTick_Handler+0x70>)
 80016c6:	f000 f9c5 	bl	8001a54 <iprintf>
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	080027c4 	.word	0x080027c4
 80016d8:	080027c8 	.word	0x080027c8
 80016dc:	080027cc 	.word	0x080027cc
 80016e0:	080027e4 	.word	0x080027e4

080016e4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <ITM_SendChar+0x48>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <ITM_SendChar+0x48>)
 80016f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <ITM_SendChar+0x4c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <ITM_SendChar+0x4c>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001706:	bf00      	nop
 8001708:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f8      	beq.n	8001708 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001716:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	6013      	str	r3, [r2, #0]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000edfc 	.word	0xe000edfc
 8001730:	e0000e00 	.word	0xe0000e00

08001734 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e00a      	b.n	800175c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001746:	f3af 8000 	nop.w
 800174a:	4601      	mov	r1, r0
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	60ba      	str	r2, [r7, #8]
 8001752:	b2ca      	uxtb	r2, r1
 8001754:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	dbf0      	blt.n	8001746 <_read+0x12>
  }

  return len;
 8001764:	687b      	ldr	r3, [r7, #4]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e009      	b.n	8001794 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	60ba      	str	r2, [r7, #8]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ffab 	bl	80016e4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	dbf1      	blt.n	8001780 <_write+0x12>
  }
  return len;
 800179c:	687b      	ldr	r3, [r7, #4]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_close>:

int _close(int file)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ce:	605a      	str	r2, [r3, #4]
  return 0;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_isatty>:

int _isatty(int file)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f000 f9ac 	bl	8001b9c <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20018000 	.word	0x20018000
 8001870:	00000400 	.word	0x00000400
 8001874:	200000d0 	.word	0x200000d0
 8001878:	20000220 	.word	0x20000220

0800187c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800187e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001880:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001886:	490d      	ldr	r1, [pc, #52]	; (80018bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <LoopForever+0xe>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800189c:	4c0a      	ldr	r4, [pc, #40]	; (80018c8 <LoopForever+0x16>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018aa:	f000 f97d 	bl	8001ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ae:	f7ff fe85 	bl	80015bc <main>

080018b2 <LoopForever>:

LoopForever:
  b LoopForever
 80018b2:	e7fe      	b.n	80018b2 <LoopForever>
  ldr   r0, =_estack
 80018b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80018c0:	08002838 	.word	0x08002838
  ldr r2, =_sbss
 80018c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80018c8:	20000220 	.word	0x20000220

080018cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC_IRQHandler>
	...

080018d0 <std>:
 80018d0:	2300      	movs	r3, #0
 80018d2:	b510      	push	{r4, lr}
 80018d4:	4604      	mov	r4, r0
 80018d6:	e9c0 3300 	strd	r3, r3, [r0]
 80018da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018de:	6083      	str	r3, [r0, #8]
 80018e0:	8181      	strh	r1, [r0, #12]
 80018e2:	6643      	str	r3, [r0, #100]	; 0x64
 80018e4:	81c2      	strh	r2, [r0, #14]
 80018e6:	6183      	str	r3, [r0, #24]
 80018e8:	4619      	mov	r1, r3
 80018ea:	2208      	movs	r2, #8
 80018ec:	305c      	adds	r0, #92	; 0x5c
 80018ee:	f000 f906 	bl	8001afe <memset>
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <std+0x58>)
 80018f4:	6263      	str	r3, [r4, #36]	; 0x24
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <std+0x5c>)
 80018f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <std+0x60>)
 80018fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <std+0x64>)
 8001900:	6323      	str	r3, [r4, #48]	; 0x30
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <std+0x68>)
 8001904:	6224      	str	r4, [r4, #32]
 8001906:	429c      	cmp	r4, r3
 8001908:	d006      	beq.n	8001918 <std+0x48>
 800190a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800190e:	4294      	cmp	r4, r2
 8001910:	d002      	beq.n	8001918 <std+0x48>
 8001912:	33d0      	adds	r3, #208	; 0xd0
 8001914:	429c      	cmp	r4, r3
 8001916:	d105      	bne.n	8001924 <std+0x54>
 8001918:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800191c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001920:	f000 b966 	b.w	8001bf0 <__retarget_lock_init_recursive>
 8001924:	bd10      	pop	{r4, pc}
 8001926:	bf00      	nop
 8001928:	08001a79 	.word	0x08001a79
 800192c:	08001a9b 	.word	0x08001a9b
 8001930:	08001ad3 	.word	0x08001ad3
 8001934:	08001af7 	.word	0x08001af7
 8001938:	200000d4 	.word	0x200000d4

0800193c <stdio_exit_handler>:
 800193c:	4a02      	ldr	r2, [pc, #8]	; (8001948 <stdio_exit_handler+0xc>)
 800193e:	4903      	ldr	r1, [pc, #12]	; (800194c <stdio_exit_handler+0x10>)
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <stdio_exit_handler+0x14>)
 8001942:	f000 b869 	b.w	8001a18 <_fwalk_sglue>
 8001946:	bf00      	nop
 8001948:	20000018 	.word	0x20000018
 800194c:	0800249d 	.word	0x0800249d
 8001950:	20000024 	.word	0x20000024

08001954 <cleanup_stdio>:
 8001954:	6841      	ldr	r1, [r0, #4]
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <cleanup_stdio+0x34>)
 8001958:	4299      	cmp	r1, r3
 800195a:	b510      	push	{r4, lr}
 800195c:	4604      	mov	r4, r0
 800195e:	d001      	beq.n	8001964 <cleanup_stdio+0x10>
 8001960:	f000 fd9c 	bl	800249c <_fflush_r>
 8001964:	68a1      	ldr	r1, [r4, #8]
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <cleanup_stdio+0x38>)
 8001968:	4299      	cmp	r1, r3
 800196a:	d002      	beq.n	8001972 <cleanup_stdio+0x1e>
 800196c:	4620      	mov	r0, r4
 800196e:	f000 fd95 	bl	800249c <_fflush_r>
 8001972:	68e1      	ldr	r1, [r4, #12]
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <cleanup_stdio+0x3c>)
 8001976:	4299      	cmp	r1, r3
 8001978:	d004      	beq.n	8001984 <cleanup_stdio+0x30>
 800197a:	4620      	mov	r0, r4
 800197c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001980:	f000 bd8c 	b.w	800249c <_fflush_r>
 8001984:	bd10      	pop	{r4, pc}
 8001986:	bf00      	nop
 8001988:	200000d4 	.word	0x200000d4
 800198c:	2000013c 	.word	0x2000013c
 8001990:	200001a4 	.word	0x200001a4

08001994 <global_stdio_init.part.0>:
 8001994:	b510      	push	{r4, lr}
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <global_stdio_init.part.0+0x30>)
 8001998:	4c0b      	ldr	r4, [pc, #44]	; (80019c8 <global_stdio_init.part.0+0x34>)
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <global_stdio_init.part.0+0x38>)
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	4620      	mov	r0, r4
 80019a0:	2200      	movs	r2, #0
 80019a2:	2104      	movs	r1, #4
 80019a4:	f7ff ff94 	bl	80018d0 <std>
 80019a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80019ac:	2201      	movs	r2, #1
 80019ae:	2109      	movs	r1, #9
 80019b0:	f7ff ff8e 	bl	80018d0 <std>
 80019b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80019b8:	2202      	movs	r2, #2
 80019ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019be:	2112      	movs	r1, #18
 80019c0:	f7ff bf86 	b.w	80018d0 <std>
 80019c4:	2000020c 	.word	0x2000020c
 80019c8:	200000d4 	.word	0x200000d4
 80019cc:	0800193d 	.word	0x0800193d

080019d0 <__sfp_lock_acquire>:
 80019d0:	4801      	ldr	r0, [pc, #4]	; (80019d8 <__sfp_lock_acquire+0x8>)
 80019d2:	f000 b90e 	b.w	8001bf2 <__retarget_lock_acquire_recursive>
 80019d6:	bf00      	nop
 80019d8:	20000215 	.word	0x20000215

080019dc <__sfp_lock_release>:
 80019dc:	4801      	ldr	r0, [pc, #4]	; (80019e4 <__sfp_lock_release+0x8>)
 80019de:	f000 b909 	b.w	8001bf4 <__retarget_lock_release_recursive>
 80019e2:	bf00      	nop
 80019e4:	20000215 	.word	0x20000215

080019e8 <__sinit>:
 80019e8:	b510      	push	{r4, lr}
 80019ea:	4604      	mov	r4, r0
 80019ec:	f7ff fff0 	bl	80019d0 <__sfp_lock_acquire>
 80019f0:	6a23      	ldr	r3, [r4, #32]
 80019f2:	b11b      	cbz	r3, 80019fc <__sinit+0x14>
 80019f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019f8:	f7ff bff0 	b.w	80019dc <__sfp_lock_release>
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <__sinit+0x28>)
 80019fe:	6223      	str	r3, [r4, #32]
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <__sinit+0x2c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f5      	bne.n	80019f4 <__sinit+0xc>
 8001a08:	f7ff ffc4 	bl	8001994 <global_stdio_init.part.0>
 8001a0c:	e7f2      	b.n	80019f4 <__sinit+0xc>
 8001a0e:	bf00      	nop
 8001a10:	08001955 	.word	0x08001955
 8001a14:	2000020c 	.word	0x2000020c

08001a18 <_fwalk_sglue>:
 8001a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a1c:	4607      	mov	r7, r0
 8001a1e:	4688      	mov	r8, r1
 8001a20:	4614      	mov	r4, r2
 8001a22:	2600      	movs	r6, #0
 8001a24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a28:	f1b9 0901 	subs.w	r9, r9, #1
 8001a2c:	d505      	bpl.n	8001a3a <_fwalk_sglue+0x22>
 8001a2e:	6824      	ldr	r4, [r4, #0]
 8001a30:	2c00      	cmp	r4, #0
 8001a32:	d1f7      	bne.n	8001a24 <_fwalk_sglue+0xc>
 8001a34:	4630      	mov	r0, r6
 8001a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a3a:	89ab      	ldrh	r3, [r5, #12]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d907      	bls.n	8001a50 <_fwalk_sglue+0x38>
 8001a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a44:	3301      	adds	r3, #1
 8001a46:	d003      	beq.n	8001a50 <_fwalk_sglue+0x38>
 8001a48:	4629      	mov	r1, r5
 8001a4a:	4638      	mov	r0, r7
 8001a4c:	47c0      	blx	r8
 8001a4e:	4306      	orrs	r6, r0
 8001a50:	3568      	adds	r5, #104	; 0x68
 8001a52:	e7e9      	b.n	8001a28 <_fwalk_sglue+0x10>

08001a54 <iprintf>:
 8001a54:	b40f      	push	{r0, r1, r2, r3}
 8001a56:	b507      	push	{r0, r1, r2, lr}
 8001a58:	4906      	ldr	r1, [pc, #24]	; (8001a74 <iprintf+0x20>)
 8001a5a:	ab04      	add	r3, sp, #16
 8001a5c:	6808      	ldr	r0, [r1, #0]
 8001a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a62:	6881      	ldr	r1, [r0, #8]
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	f000 f9e9 	bl	8001e3c <_vfiprintf_r>
 8001a6a:	b003      	add	sp, #12
 8001a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a70:	b004      	add	sp, #16
 8001a72:	4770      	bx	lr
 8001a74:	20000070 	.word	0x20000070

08001a78 <__sread>:
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a80:	f000 f868 	bl	8001b54 <_read_r>
 8001a84:	2800      	cmp	r0, #0
 8001a86:	bfab      	itete	ge
 8001a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8001a8c:	181b      	addge	r3, r3, r0
 8001a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a92:	bfac      	ite	ge
 8001a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a96:	81a3      	strhlt	r3, [r4, #12]
 8001a98:	bd10      	pop	{r4, pc}

08001a9a <__swrite>:
 8001a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a9e:	461f      	mov	r7, r3
 8001aa0:	898b      	ldrh	r3, [r1, #12]
 8001aa2:	05db      	lsls	r3, r3, #23
 8001aa4:	4605      	mov	r5, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4616      	mov	r6, r2
 8001aaa:	d505      	bpl.n	8001ab8 <__swrite+0x1e>
 8001aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f000 f83c 	bl	8001b30 <_lseek_r>
 8001ab8:	89a3      	ldrh	r3, [r4, #12]
 8001aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ac2:	81a3      	strh	r3, [r4, #12]
 8001ac4:	4632      	mov	r2, r6
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4628      	mov	r0, r5
 8001aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ace:	f000 b853 	b.w	8001b78 <_write_r>

08001ad2 <__sseek>:
 8001ad2:	b510      	push	{r4, lr}
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ada:	f000 f829 	bl	8001b30 <_lseek_r>
 8001ade:	1c43      	adds	r3, r0, #1
 8001ae0:	89a3      	ldrh	r3, [r4, #12]
 8001ae2:	bf15      	itete	ne
 8001ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001aee:	81a3      	strheq	r3, [r4, #12]
 8001af0:	bf18      	it	ne
 8001af2:	81a3      	strhne	r3, [r4, #12]
 8001af4:	bd10      	pop	{r4, pc}

08001af6 <__sclose>:
 8001af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001afa:	f000 b809 	b.w	8001b10 <_close_r>

08001afe <memset>:
 8001afe:	4402      	add	r2, r0
 8001b00:	4603      	mov	r3, r0
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d100      	bne.n	8001b08 <memset+0xa>
 8001b06:	4770      	bx	lr
 8001b08:	f803 1b01 	strb.w	r1, [r3], #1
 8001b0c:	e7f9      	b.n	8001b02 <memset+0x4>
	...

08001b10 <_close_r>:
 8001b10:	b538      	push	{r3, r4, r5, lr}
 8001b12:	4d06      	ldr	r5, [pc, #24]	; (8001b2c <_close_r+0x1c>)
 8001b14:	2300      	movs	r3, #0
 8001b16:	4604      	mov	r4, r0
 8001b18:	4608      	mov	r0, r1
 8001b1a:	602b      	str	r3, [r5, #0]
 8001b1c:	f7ff fe43 	bl	80017a6 <_close>
 8001b20:	1c43      	adds	r3, r0, #1
 8001b22:	d102      	bne.n	8001b2a <_close_r+0x1a>
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	b103      	cbz	r3, 8001b2a <_close_r+0x1a>
 8001b28:	6023      	str	r3, [r4, #0]
 8001b2a:	bd38      	pop	{r3, r4, r5, pc}
 8001b2c:	20000210 	.word	0x20000210

08001b30 <_lseek_r>:
 8001b30:	b538      	push	{r3, r4, r5, lr}
 8001b32:	4d07      	ldr	r5, [pc, #28]	; (8001b50 <_lseek_r+0x20>)
 8001b34:	4604      	mov	r4, r0
 8001b36:	4608      	mov	r0, r1
 8001b38:	4611      	mov	r1, r2
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	602a      	str	r2, [r5, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f7ff fe58 	bl	80017f4 <_lseek>
 8001b44:	1c43      	adds	r3, r0, #1
 8001b46:	d102      	bne.n	8001b4e <_lseek_r+0x1e>
 8001b48:	682b      	ldr	r3, [r5, #0]
 8001b4a:	b103      	cbz	r3, 8001b4e <_lseek_r+0x1e>
 8001b4c:	6023      	str	r3, [r4, #0]
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
 8001b50:	20000210 	.word	0x20000210

08001b54 <_read_r>:
 8001b54:	b538      	push	{r3, r4, r5, lr}
 8001b56:	4d07      	ldr	r5, [pc, #28]	; (8001b74 <_read_r+0x20>)
 8001b58:	4604      	mov	r4, r0
 8001b5a:	4608      	mov	r0, r1
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	2200      	movs	r2, #0
 8001b60:	602a      	str	r2, [r5, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f7ff fde6 	bl	8001734 <_read>
 8001b68:	1c43      	adds	r3, r0, #1
 8001b6a:	d102      	bne.n	8001b72 <_read_r+0x1e>
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	b103      	cbz	r3, 8001b72 <_read_r+0x1e>
 8001b70:	6023      	str	r3, [r4, #0]
 8001b72:	bd38      	pop	{r3, r4, r5, pc}
 8001b74:	20000210 	.word	0x20000210

08001b78 <_write_r>:
 8001b78:	b538      	push	{r3, r4, r5, lr}
 8001b7a:	4d07      	ldr	r5, [pc, #28]	; (8001b98 <_write_r+0x20>)
 8001b7c:	4604      	mov	r4, r0
 8001b7e:	4608      	mov	r0, r1
 8001b80:	4611      	mov	r1, r2
 8001b82:	2200      	movs	r2, #0
 8001b84:	602a      	str	r2, [r5, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f7ff fdf1 	bl	800176e <_write>
 8001b8c:	1c43      	adds	r3, r0, #1
 8001b8e:	d102      	bne.n	8001b96 <_write_r+0x1e>
 8001b90:	682b      	ldr	r3, [r5, #0]
 8001b92:	b103      	cbz	r3, 8001b96 <_write_r+0x1e>
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	bd38      	pop	{r3, r4, r5, pc}
 8001b98:	20000210 	.word	0x20000210

08001b9c <__errno>:
 8001b9c:	4b01      	ldr	r3, [pc, #4]	; (8001ba4 <__errno+0x8>)
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000070 	.word	0x20000070

08001ba8 <__libc_init_array>:
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	4d0d      	ldr	r5, [pc, #52]	; (8001be0 <__libc_init_array+0x38>)
 8001bac:	4c0d      	ldr	r4, [pc, #52]	; (8001be4 <__libc_init_array+0x3c>)
 8001bae:	1b64      	subs	r4, r4, r5
 8001bb0:	10a4      	asrs	r4, r4, #2
 8001bb2:	2600      	movs	r6, #0
 8001bb4:	42a6      	cmp	r6, r4
 8001bb6:	d109      	bne.n	8001bcc <__libc_init_array+0x24>
 8001bb8:	4d0b      	ldr	r5, [pc, #44]	; (8001be8 <__libc_init_array+0x40>)
 8001bba:	4c0c      	ldr	r4, [pc, #48]	; (8001bec <__libc_init_array+0x44>)
 8001bbc:	f000 fdc0 	bl	8002740 <_init>
 8001bc0:	1b64      	subs	r4, r4, r5
 8001bc2:	10a4      	asrs	r4, r4, #2
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	42a6      	cmp	r6, r4
 8001bc8:	d105      	bne.n	8001bd6 <__libc_init_array+0x2e>
 8001bca:	bd70      	pop	{r4, r5, r6, pc}
 8001bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bd0:	4798      	blx	r3
 8001bd2:	3601      	adds	r6, #1
 8001bd4:	e7ee      	b.n	8001bb4 <__libc_init_array+0xc>
 8001bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bda:	4798      	blx	r3
 8001bdc:	3601      	adds	r6, #1
 8001bde:	e7f2      	b.n	8001bc6 <__libc_init_array+0x1e>
 8001be0:	08002830 	.word	0x08002830
 8001be4:	08002830 	.word	0x08002830
 8001be8:	08002830 	.word	0x08002830
 8001bec:	08002834 	.word	0x08002834

08001bf0 <__retarget_lock_init_recursive>:
 8001bf0:	4770      	bx	lr

08001bf2 <__retarget_lock_acquire_recursive>:
 8001bf2:	4770      	bx	lr

08001bf4 <__retarget_lock_release_recursive>:
 8001bf4:	4770      	bx	lr
	...

08001bf8 <_free_r>:
 8001bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bfa:	2900      	cmp	r1, #0
 8001bfc:	d044      	beq.n	8001c88 <_free_r+0x90>
 8001bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c02:	9001      	str	r0, [sp, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f1a1 0404 	sub.w	r4, r1, #4
 8001c0a:	bfb8      	it	lt
 8001c0c:	18e4      	addlt	r4, r4, r3
 8001c0e:	f000 f8df 	bl	8001dd0 <__malloc_lock>
 8001c12:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <_free_r+0x94>)
 8001c14:	9801      	ldr	r0, [sp, #4]
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	b933      	cbnz	r3, 8001c28 <_free_r+0x30>
 8001c1a:	6063      	str	r3, [r4, #4]
 8001c1c:	6014      	str	r4, [r2, #0]
 8001c1e:	b003      	add	sp, #12
 8001c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c24:	f000 b8da 	b.w	8001ddc <__malloc_unlock>
 8001c28:	42a3      	cmp	r3, r4
 8001c2a:	d908      	bls.n	8001c3e <_free_r+0x46>
 8001c2c:	6825      	ldr	r5, [r4, #0]
 8001c2e:	1961      	adds	r1, r4, r5
 8001c30:	428b      	cmp	r3, r1
 8001c32:	bf01      	itttt	eq
 8001c34:	6819      	ldreq	r1, [r3, #0]
 8001c36:	685b      	ldreq	r3, [r3, #4]
 8001c38:	1949      	addeq	r1, r1, r5
 8001c3a:	6021      	streq	r1, [r4, #0]
 8001c3c:	e7ed      	b.n	8001c1a <_free_r+0x22>
 8001c3e:	461a      	mov	r2, r3
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	b10b      	cbz	r3, 8001c48 <_free_r+0x50>
 8001c44:	42a3      	cmp	r3, r4
 8001c46:	d9fa      	bls.n	8001c3e <_free_r+0x46>
 8001c48:	6811      	ldr	r1, [r2, #0]
 8001c4a:	1855      	adds	r5, r2, r1
 8001c4c:	42a5      	cmp	r5, r4
 8001c4e:	d10b      	bne.n	8001c68 <_free_r+0x70>
 8001c50:	6824      	ldr	r4, [r4, #0]
 8001c52:	4421      	add	r1, r4
 8001c54:	1854      	adds	r4, r2, r1
 8001c56:	42a3      	cmp	r3, r4
 8001c58:	6011      	str	r1, [r2, #0]
 8001c5a:	d1e0      	bne.n	8001c1e <_free_r+0x26>
 8001c5c:	681c      	ldr	r4, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	6053      	str	r3, [r2, #4]
 8001c62:	440c      	add	r4, r1
 8001c64:	6014      	str	r4, [r2, #0]
 8001c66:	e7da      	b.n	8001c1e <_free_r+0x26>
 8001c68:	d902      	bls.n	8001c70 <_free_r+0x78>
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	6003      	str	r3, [r0, #0]
 8001c6e:	e7d6      	b.n	8001c1e <_free_r+0x26>
 8001c70:	6825      	ldr	r5, [r4, #0]
 8001c72:	1961      	adds	r1, r4, r5
 8001c74:	428b      	cmp	r3, r1
 8001c76:	bf04      	itt	eq
 8001c78:	6819      	ldreq	r1, [r3, #0]
 8001c7a:	685b      	ldreq	r3, [r3, #4]
 8001c7c:	6063      	str	r3, [r4, #4]
 8001c7e:	bf04      	itt	eq
 8001c80:	1949      	addeq	r1, r1, r5
 8001c82:	6021      	streq	r1, [r4, #0]
 8001c84:	6054      	str	r4, [r2, #4]
 8001c86:	e7ca      	b.n	8001c1e <_free_r+0x26>
 8001c88:	b003      	add	sp, #12
 8001c8a:	bd30      	pop	{r4, r5, pc}
 8001c8c:	20000218 	.word	0x20000218

08001c90 <sbrk_aligned>:
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	4e0e      	ldr	r6, [pc, #56]	; (8001ccc <sbrk_aligned+0x3c>)
 8001c94:	460c      	mov	r4, r1
 8001c96:	6831      	ldr	r1, [r6, #0]
 8001c98:	4605      	mov	r5, r0
 8001c9a:	b911      	cbnz	r1, 8001ca2 <sbrk_aligned+0x12>
 8001c9c:	f000 fcbc 	bl	8002618 <_sbrk_r>
 8001ca0:	6030      	str	r0, [r6, #0]
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f000 fcb7 	bl	8002618 <_sbrk_r>
 8001caa:	1c43      	adds	r3, r0, #1
 8001cac:	d00a      	beq.n	8001cc4 <sbrk_aligned+0x34>
 8001cae:	1cc4      	adds	r4, r0, #3
 8001cb0:	f024 0403 	bic.w	r4, r4, #3
 8001cb4:	42a0      	cmp	r0, r4
 8001cb6:	d007      	beq.n	8001cc8 <sbrk_aligned+0x38>
 8001cb8:	1a21      	subs	r1, r4, r0
 8001cba:	4628      	mov	r0, r5
 8001cbc:	f000 fcac 	bl	8002618 <_sbrk_r>
 8001cc0:	3001      	adds	r0, #1
 8001cc2:	d101      	bne.n	8001cc8 <sbrk_aligned+0x38>
 8001cc4:	f04f 34ff 	mov.w	r4, #4294967295
 8001cc8:	4620      	mov	r0, r4
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	2000021c 	.word	0x2000021c

08001cd0 <_malloc_r>:
 8001cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cd4:	1ccd      	adds	r5, r1, #3
 8001cd6:	f025 0503 	bic.w	r5, r5, #3
 8001cda:	3508      	adds	r5, #8
 8001cdc:	2d0c      	cmp	r5, #12
 8001cde:	bf38      	it	cc
 8001ce0:	250c      	movcc	r5, #12
 8001ce2:	2d00      	cmp	r5, #0
 8001ce4:	4607      	mov	r7, r0
 8001ce6:	db01      	blt.n	8001cec <_malloc_r+0x1c>
 8001ce8:	42a9      	cmp	r1, r5
 8001cea:	d905      	bls.n	8001cf8 <_malloc_r+0x28>
 8001cec:	230c      	movs	r3, #12
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	2600      	movs	r6, #0
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cf8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001dcc <_malloc_r+0xfc>
 8001cfc:	f000 f868 	bl	8001dd0 <__malloc_lock>
 8001d00:	f8d8 3000 	ldr.w	r3, [r8]
 8001d04:	461c      	mov	r4, r3
 8001d06:	bb5c      	cbnz	r4, 8001d60 <_malloc_r+0x90>
 8001d08:	4629      	mov	r1, r5
 8001d0a:	4638      	mov	r0, r7
 8001d0c:	f7ff ffc0 	bl	8001c90 <sbrk_aligned>
 8001d10:	1c43      	adds	r3, r0, #1
 8001d12:	4604      	mov	r4, r0
 8001d14:	d155      	bne.n	8001dc2 <_malloc_r+0xf2>
 8001d16:	f8d8 4000 	ldr.w	r4, [r8]
 8001d1a:	4626      	mov	r6, r4
 8001d1c:	2e00      	cmp	r6, #0
 8001d1e:	d145      	bne.n	8001dac <_malloc_r+0xdc>
 8001d20:	2c00      	cmp	r4, #0
 8001d22:	d048      	beq.n	8001db6 <_malloc_r+0xe6>
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	4631      	mov	r1, r6
 8001d28:	4638      	mov	r0, r7
 8001d2a:	eb04 0903 	add.w	r9, r4, r3
 8001d2e:	f000 fc73 	bl	8002618 <_sbrk_r>
 8001d32:	4581      	cmp	r9, r0
 8001d34:	d13f      	bne.n	8001db6 <_malloc_r+0xe6>
 8001d36:	6821      	ldr	r1, [r4, #0]
 8001d38:	1a6d      	subs	r5, r5, r1
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	4638      	mov	r0, r7
 8001d3e:	f7ff ffa7 	bl	8001c90 <sbrk_aligned>
 8001d42:	3001      	adds	r0, #1
 8001d44:	d037      	beq.n	8001db6 <_malloc_r+0xe6>
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	442b      	add	r3, r5
 8001d4a:	6023      	str	r3, [r4, #0]
 8001d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d038      	beq.n	8001dc6 <_malloc_r+0xf6>
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	42a2      	cmp	r2, r4
 8001d58:	d12b      	bne.n	8001db2 <_malloc_r+0xe2>
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	e00f      	b.n	8001d80 <_malloc_r+0xb0>
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	1b52      	subs	r2, r2, r5
 8001d64:	d41f      	bmi.n	8001da6 <_malloc_r+0xd6>
 8001d66:	2a0b      	cmp	r2, #11
 8001d68:	d917      	bls.n	8001d9a <_malloc_r+0xca>
 8001d6a:	1961      	adds	r1, r4, r5
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	6025      	str	r5, [r4, #0]
 8001d70:	bf18      	it	ne
 8001d72:	6059      	strne	r1, [r3, #4]
 8001d74:	6863      	ldr	r3, [r4, #4]
 8001d76:	bf08      	it	eq
 8001d78:	f8c8 1000 	streq.w	r1, [r8]
 8001d7c:	5162      	str	r2, [r4, r5]
 8001d7e:	604b      	str	r3, [r1, #4]
 8001d80:	4638      	mov	r0, r7
 8001d82:	f104 060b 	add.w	r6, r4, #11
 8001d86:	f000 f829 	bl	8001ddc <__malloc_unlock>
 8001d8a:	f026 0607 	bic.w	r6, r6, #7
 8001d8e:	1d23      	adds	r3, r4, #4
 8001d90:	1af2      	subs	r2, r6, r3
 8001d92:	d0ae      	beq.n	8001cf2 <_malloc_r+0x22>
 8001d94:	1b9b      	subs	r3, r3, r6
 8001d96:	50a3      	str	r3, [r4, r2]
 8001d98:	e7ab      	b.n	8001cf2 <_malloc_r+0x22>
 8001d9a:	42a3      	cmp	r3, r4
 8001d9c:	6862      	ldr	r2, [r4, #4]
 8001d9e:	d1dd      	bne.n	8001d5c <_malloc_r+0x8c>
 8001da0:	f8c8 2000 	str.w	r2, [r8]
 8001da4:	e7ec      	b.n	8001d80 <_malloc_r+0xb0>
 8001da6:	4623      	mov	r3, r4
 8001da8:	6864      	ldr	r4, [r4, #4]
 8001daa:	e7ac      	b.n	8001d06 <_malloc_r+0x36>
 8001dac:	4634      	mov	r4, r6
 8001dae:	6876      	ldr	r6, [r6, #4]
 8001db0:	e7b4      	b.n	8001d1c <_malloc_r+0x4c>
 8001db2:	4613      	mov	r3, r2
 8001db4:	e7cc      	b.n	8001d50 <_malloc_r+0x80>
 8001db6:	230c      	movs	r3, #12
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	4638      	mov	r0, r7
 8001dbc:	f000 f80e 	bl	8001ddc <__malloc_unlock>
 8001dc0:	e797      	b.n	8001cf2 <_malloc_r+0x22>
 8001dc2:	6025      	str	r5, [r4, #0]
 8001dc4:	e7dc      	b.n	8001d80 <_malloc_r+0xb0>
 8001dc6:	605b      	str	r3, [r3, #4]
 8001dc8:	deff      	udf	#255	; 0xff
 8001dca:	bf00      	nop
 8001dcc:	20000218 	.word	0x20000218

08001dd0 <__malloc_lock>:
 8001dd0:	4801      	ldr	r0, [pc, #4]	; (8001dd8 <__malloc_lock+0x8>)
 8001dd2:	f7ff bf0e 	b.w	8001bf2 <__retarget_lock_acquire_recursive>
 8001dd6:	bf00      	nop
 8001dd8:	20000214 	.word	0x20000214

08001ddc <__malloc_unlock>:
 8001ddc:	4801      	ldr	r0, [pc, #4]	; (8001de4 <__malloc_unlock+0x8>)
 8001dde:	f7ff bf09 	b.w	8001bf4 <__retarget_lock_release_recursive>
 8001de2:	bf00      	nop
 8001de4:	20000214 	.word	0x20000214

08001de8 <__sfputc_r>:
 8001de8:	6893      	ldr	r3, [r2, #8]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	b410      	push	{r4}
 8001df0:	6093      	str	r3, [r2, #8]
 8001df2:	da08      	bge.n	8001e06 <__sfputc_r+0x1e>
 8001df4:	6994      	ldr	r4, [r2, #24]
 8001df6:	42a3      	cmp	r3, r4
 8001df8:	db01      	blt.n	8001dfe <__sfputc_r+0x16>
 8001dfa:	290a      	cmp	r1, #10
 8001dfc:	d103      	bne.n	8001e06 <__sfputc_r+0x1e>
 8001dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e02:	f000 bb73 	b.w	80024ec <__swbuf_r>
 8001e06:	6813      	ldr	r3, [r2, #0]
 8001e08:	1c58      	adds	r0, r3, #1
 8001e0a:	6010      	str	r0, [r2, #0]
 8001e0c:	7019      	strb	r1, [r3, #0]
 8001e0e:	4608      	mov	r0, r1
 8001e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <__sfputs_r>:
 8001e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e18:	4606      	mov	r6, r0
 8001e1a:	460f      	mov	r7, r1
 8001e1c:	4614      	mov	r4, r2
 8001e1e:	18d5      	adds	r5, r2, r3
 8001e20:	42ac      	cmp	r4, r5
 8001e22:	d101      	bne.n	8001e28 <__sfputs_r+0x12>
 8001e24:	2000      	movs	r0, #0
 8001e26:	e007      	b.n	8001e38 <__sfputs_r+0x22>
 8001e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e2c:	463a      	mov	r2, r7
 8001e2e:	4630      	mov	r0, r6
 8001e30:	f7ff ffda 	bl	8001de8 <__sfputc_r>
 8001e34:	1c43      	adds	r3, r0, #1
 8001e36:	d1f3      	bne.n	8001e20 <__sfputs_r+0xa>
 8001e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e3c <_vfiprintf_r>:
 8001e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e40:	460d      	mov	r5, r1
 8001e42:	b09d      	sub	sp, #116	; 0x74
 8001e44:	4614      	mov	r4, r2
 8001e46:	4698      	mov	r8, r3
 8001e48:	4606      	mov	r6, r0
 8001e4a:	b118      	cbz	r0, 8001e54 <_vfiprintf_r+0x18>
 8001e4c:	6a03      	ldr	r3, [r0, #32]
 8001e4e:	b90b      	cbnz	r3, 8001e54 <_vfiprintf_r+0x18>
 8001e50:	f7ff fdca 	bl	80019e8 <__sinit>
 8001e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e56:	07d9      	lsls	r1, r3, #31
 8001e58:	d405      	bmi.n	8001e66 <_vfiprintf_r+0x2a>
 8001e5a:	89ab      	ldrh	r3, [r5, #12]
 8001e5c:	059a      	lsls	r2, r3, #22
 8001e5e:	d402      	bmi.n	8001e66 <_vfiprintf_r+0x2a>
 8001e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e62:	f7ff fec6 	bl	8001bf2 <__retarget_lock_acquire_recursive>
 8001e66:	89ab      	ldrh	r3, [r5, #12]
 8001e68:	071b      	lsls	r3, r3, #28
 8001e6a:	d501      	bpl.n	8001e70 <_vfiprintf_r+0x34>
 8001e6c:	692b      	ldr	r3, [r5, #16]
 8001e6e:	b99b      	cbnz	r3, 8001e98 <_vfiprintf_r+0x5c>
 8001e70:	4629      	mov	r1, r5
 8001e72:	4630      	mov	r0, r6
 8001e74:	f000 fb78 	bl	8002568 <__swsetup_r>
 8001e78:	b170      	cbz	r0, 8001e98 <_vfiprintf_r+0x5c>
 8001e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e7c:	07dc      	lsls	r4, r3, #31
 8001e7e:	d504      	bpl.n	8001e8a <_vfiprintf_r+0x4e>
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	b01d      	add	sp, #116	; 0x74
 8001e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e8a:	89ab      	ldrh	r3, [r5, #12]
 8001e8c:	0598      	lsls	r0, r3, #22
 8001e8e:	d4f7      	bmi.n	8001e80 <_vfiprintf_r+0x44>
 8001e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e92:	f7ff feaf 	bl	8001bf4 <__retarget_lock_release_recursive>
 8001e96:	e7f3      	b.n	8001e80 <_vfiprintf_r+0x44>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ea6:	2330      	movs	r3, #48	; 0x30
 8001ea8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800205c <_vfiprintf_r+0x220>
 8001eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001eb0:	f04f 0901 	mov.w	r9, #1
 8001eb4:	4623      	mov	r3, r4
 8001eb6:	469a      	mov	sl, r3
 8001eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ebc:	b10a      	cbz	r2, 8001ec2 <_vfiprintf_r+0x86>
 8001ebe:	2a25      	cmp	r2, #37	; 0x25
 8001ec0:	d1f9      	bne.n	8001eb6 <_vfiprintf_r+0x7a>
 8001ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8001ec6:	d00b      	beq.n	8001ee0 <_vfiprintf_r+0xa4>
 8001ec8:	465b      	mov	r3, fp
 8001eca:	4622      	mov	r2, r4
 8001ecc:	4629      	mov	r1, r5
 8001ece:	4630      	mov	r0, r6
 8001ed0:	f7ff ffa1 	bl	8001e16 <__sfputs_r>
 8001ed4:	3001      	adds	r0, #1
 8001ed6:	f000 80a9 	beq.w	800202c <_vfiprintf_r+0x1f0>
 8001eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001edc:	445a      	add	r2, fp
 8001ede:	9209      	str	r2, [sp, #36]	; 0x24
 8001ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a1 	beq.w	800202c <_vfiprintf_r+0x1f0>
 8001eea:	2300      	movs	r3, #0
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ef4:	f10a 0a01 	add.w	sl, sl, #1
 8001ef8:	9304      	str	r3, [sp, #16]
 8001efa:	9307      	str	r3, [sp, #28]
 8001efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f00:	931a      	str	r3, [sp, #104]	; 0x68
 8001f02:	4654      	mov	r4, sl
 8001f04:	2205      	movs	r2, #5
 8001f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f0a:	4854      	ldr	r0, [pc, #336]	; (800205c <_vfiprintf_r+0x220>)
 8001f0c:	f7fe f968 	bl	80001e0 <memchr>
 8001f10:	9a04      	ldr	r2, [sp, #16]
 8001f12:	b9d8      	cbnz	r0, 8001f4c <_vfiprintf_r+0x110>
 8001f14:	06d1      	lsls	r1, r2, #27
 8001f16:	bf44      	itt	mi
 8001f18:	2320      	movmi	r3, #32
 8001f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f1e:	0713      	lsls	r3, r2, #28
 8001f20:	bf44      	itt	mi
 8001f22:	232b      	movmi	r3, #43	; 0x2b
 8001f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f28:	f89a 3000 	ldrb.w	r3, [sl]
 8001f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f2e:	d015      	beq.n	8001f5c <_vfiprintf_r+0x120>
 8001f30:	9a07      	ldr	r2, [sp, #28]
 8001f32:	4654      	mov	r4, sl
 8001f34:	2000      	movs	r0, #0
 8001f36:	f04f 0c0a 	mov.w	ip, #10
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f40:	3b30      	subs	r3, #48	; 0x30
 8001f42:	2b09      	cmp	r3, #9
 8001f44:	d94d      	bls.n	8001fe2 <_vfiprintf_r+0x1a6>
 8001f46:	b1b0      	cbz	r0, 8001f76 <_vfiprintf_r+0x13a>
 8001f48:	9207      	str	r2, [sp, #28]
 8001f4a:	e014      	b.n	8001f76 <_vfiprintf_r+0x13a>
 8001f4c:	eba0 0308 	sub.w	r3, r0, r8
 8001f50:	fa09 f303 	lsl.w	r3, r9, r3
 8001f54:	4313      	orrs	r3, r2
 8001f56:	9304      	str	r3, [sp, #16]
 8001f58:	46a2      	mov	sl, r4
 8001f5a:	e7d2      	b.n	8001f02 <_vfiprintf_r+0xc6>
 8001f5c:	9b03      	ldr	r3, [sp, #12]
 8001f5e:	1d19      	adds	r1, r3, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	9103      	str	r1, [sp, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bfbb      	ittet	lt
 8001f68:	425b      	neglt	r3, r3
 8001f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8001f6e:	9307      	strge	r3, [sp, #28]
 8001f70:	9307      	strlt	r3, [sp, #28]
 8001f72:	bfb8      	it	lt
 8001f74:	9204      	strlt	r2, [sp, #16]
 8001f76:	7823      	ldrb	r3, [r4, #0]
 8001f78:	2b2e      	cmp	r3, #46	; 0x2e
 8001f7a:	d10c      	bne.n	8001f96 <_vfiprintf_r+0x15a>
 8001f7c:	7863      	ldrb	r3, [r4, #1]
 8001f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f80:	d134      	bne.n	8001fec <_vfiprintf_r+0x1b0>
 8001f82:	9b03      	ldr	r3, [sp, #12]
 8001f84:	1d1a      	adds	r2, r3, #4
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	9203      	str	r2, [sp, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bfb8      	it	lt
 8001f8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f92:	3402      	adds	r4, #2
 8001f94:	9305      	str	r3, [sp, #20]
 8001f96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800206c <_vfiprintf_r+0x230>
 8001f9a:	7821      	ldrb	r1, [r4, #0]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	4650      	mov	r0, sl
 8001fa0:	f7fe f91e 	bl	80001e0 <memchr>
 8001fa4:	b138      	cbz	r0, 8001fb6 <_vfiprintf_r+0x17a>
 8001fa6:	9b04      	ldr	r3, [sp, #16]
 8001fa8:	eba0 000a 	sub.w	r0, r0, sl
 8001fac:	2240      	movs	r2, #64	; 0x40
 8001fae:	4082      	lsls	r2, r0
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	3401      	adds	r4, #1
 8001fb4:	9304      	str	r3, [sp, #16]
 8001fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fba:	4829      	ldr	r0, [pc, #164]	; (8002060 <_vfiprintf_r+0x224>)
 8001fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001fc0:	2206      	movs	r2, #6
 8001fc2:	f7fe f90d 	bl	80001e0 <memchr>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d03f      	beq.n	800204a <_vfiprintf_r+0x20e>
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <_vfiprintf_r+0x228>)
 8001fcc:	bb1b      	cbnz	r3, 8002016 <_vfiprintf_r+0x1da>
 8001fce:	9b03      	ldr	r3, [sp, #12]
 8001fd0:	3307      	adds	r3, #7
 8001fd2:	f023 0307 	bic.w	r3, r3, #7
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	9303      	str	r3, [sp, #12]
 8001fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fdc:	443b      	add	r3, r7
 8001fde:	9309      	str	r3, [sp, #36]	; 0x24
 8001fe0:	e768      	b.n	8001eb4 <_vfiprintf_r+0x78>
 8001fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8001fe6:	460c      	mov	r4, r1
 8001fe8:	2001      	movs	r0, #1
 8001fea:	e7a6      	b.n	8001f3a <_vfiprintf_r+0xfe>
 8001fec:	2300      	movs	r3, #0
 8001fee:	3401      	adds	r4, #1
 8001ff0:	9305      	str	r3, [sp, #20]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f04f 0c0a 	mov.w	ip, #10
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ffe:	3a30      	subs	r2, #48	; 0x30
 8002000:	2a09      	cmp	r2, #9
 8002002:	d903      	bls.n	800200c <_vfiprintf_r+0x1d0>
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0c6      	beq.n	8001f96 <_vfiprintf_r+0x15a>
 8002008:	9105      	str	r1, [sp, #20]
 800200a:	e7c4      	b.n	8001f96 <_vfiprintf_r+0x15a>
 800200c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002010:	4604      	mov	r4, r0
 8002012:	2301      	movs	r3, #1
 8002014:	e7f0      	b.n	8001ff8 <_vfiprintf_r+0x1bc>
 8002016:	ab03      	add	r3, sp, #12
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	462a      	mov	r2, r5
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <_vfiprintf_r+0x22c>)
 800201e:	a904      	add	r1, sp, #16
 8002020:	4630      	mov	r0, r6
 8002022:	f3af 8000 	nop.w
 8002026:	4607      	mov	r7, r0
 8002028:	1c78      	adds	r0, r7, #1
 800202a:	d1d6      	bne.n	8001fda <_vfiprintf_r+0x19e>
 800202c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800202e:	07d9      	lsls	r1, r3, #31
 8002030:	d405      	bmi.n	800203e <_vfiprintf_r+0x202>
 8002032:	89ab      	ldrh	r3, [r5, #12]
 8002034:	059a      	lsls	r2, r3, #22
 8002036:	d402      	bmi.n	800203e <_vfiprintf_r+0x202>
 8002038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800203a:	f7ff fddb 	bl	8001bf4 <__retarget_lock_release_recursive>
 800203e:	89ab      	ldrh	r3, [r5, #12]
 8002040:	065b      	lsls	r3, r3, #25
 8002042:	f53f af1d 	bmi.w	8001e80 <_vfiprintf_r+0x44>
 8002046:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002048:	e71c      	b.n	8001e84 <_vfiprintf_r+0x48>
 800204a:	ab03      	add	r3, sp, #12
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	462a      	mov	r2, r5
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <_vfiprintf_r+0x22c>)
 8002052:	a904      	add	r1, sp, #16
 8002054:	4630      	mov	r0, r6
 8002056:	f000 f879 	bl	800214c <_printf_i>
 800205a:	e7e4      	b.n	8002026 <_vfiprintf_r+0x1ea>
 800205c:	080027fc 	.word	0x080027fc
 8002060:	08002806 	.word	0x08002806
 8002064:	00000000 	.word	0x00000000
 8002068:	08001e17 	.word	0x08001e17
 800206c:	08002802 	.word	0x08002802

08002070 <_printf_common>:
 8002070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002074:	4616      	mov	r6, r2
 8002076:	4699      	mov	r9, r3
 8002078:	688a      	ldr	r2, [r1, #8]
 800207a:	690b      	ldr	r3, [r1, #16]
 800207c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002080:	4293      	cmp	r3, r2
 8002082:	bfb8      	it	lt
 8002084:	4613      	movlt	r3, r2
 8002086:	6033      	str	r3, [r6, #0]
 8002088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800208c:	4607      	mov	r7, r0
 800208e:	460c      	mov	r4, r1
 8002090:	b10a      	cbz	r2, 8002096 <_printf_common+0x26>
 8002092:	3301      	adds	r3, #1
 8002094:	6033      	str	r3, [r6, #0]
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	0699      	lsls	r1, r3, #26
 800209a:	bf42      	ittt	mi
 800209c:	6833      	ldrmi	r3, [r6, #0]
 800209e:	3302      	addmi	r3, #2
 80020a0:	6033      	strmi	r3, [r6, #0]
 80020a2:	6825      	ldr	r5, [r4, #0]
 80020a4:	f015 0506 	ands.w	r5, r5, #6
 80020a8:	d106      	bne.n	80020b8 <_printf_common+0x48>
 80020aa:	f104 0a19 	add.w	sl, r4, #25
 80020ae:	68e3      	ldr	r3, [r4, #12]
 80020b0:	6832      	ldr	r2, [r6, #0]
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	42ab      	cmp	r3, r5
 80020b6:	dc26      	bgt.n	8002106 <_printf_common+0x96>
 80020b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80020bc:	1e13      	subs	r3, r2, #0
 80020be:	6822      	ldr	r2, [r4, #0]
 80020c0:	bf18      	it	ne
 80020c2:	2301      	movne	r3, #1
 80020c4:	0692      	lsls	r2, r2, #26
 80020c6:	d42b      	bmi.n	8002120 <_printf_common+0xb0>
 80020c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020cc:	4649      	mov	r1, r9
 80020ce:	4638      	mov	r0, r7
 80020d0:	47c0      	blx	r8
 80020d2:	3001      	adds	r0, #1
 80020d4:	d01e      	beq.n	8002114 <_printf_common+0xa4>
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	6922      	ldr	r2, [r4, #16]
 80020da:	f003 0306 	and.w	r3, r3, #6
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf02      	ittt	eq
 80020e2:	68e5      	ldreq	r5, [r4, #12]
 80020e4:	6833      	ldreq	r3, [r6, #0]
 80020e6:	1aed      	subeq	r5, r5, r3
 80020e8:	68a3      	ldr	r3, [r4, #8]
 80020ea:	bf0c      	ite	eq
 80020ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020f0:	2500      	movne	r5, #0
 80020f2:	4293      	cmp	r3, r2
 80020f4:	bfc4      	itt	gt
 80020f6:	1a9b      	subgt	r3, r3, r2
 80020f8:	18ed      	addgt	r5, r5, r3
 80020fa:	2600      	movs	r6, #0
 80020fc:	341a      	adds	r4, #26
 80020fe:	42b5      	cmp	r5, r6
 8002100:	d11a      	bne.n	8002138 <_printf_common+0xc8>
 8002102:	2000      	movs	r0, #0
 8002104:	e008      	b.n	8002118 <_printf_common+0xa8>
 8002106:	2301      	movs	r3, #1
 8002108:	4652      	mov	r2, sl
 800210a:	4649      	mov	r1, r9
 800210c:	4638      	mov	r0, r7
 800210e:	47c0      	blx	r8
 8002110:	3001      	adds	r0, #1
 8002112:	d103      	bne.n	800211c <_printf_common+0xac>
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800211c:	3501      	adds	r5, #1
 800211e:	e7c6      	b.n	80020ae <_printf_common+0x3e>
 8002120:	18e1      	adds	r1, r4, r3
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	2030      	movs	r0, #48	; 0x30
 8002126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800212a:	4422      	add	r2, r4
 800212c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002134:	3302      	adds	r3, #2
 8002136:	e7c7      	b.n	80020c8 <_printf_common+0x58>
 8002138:	2301      	movs	r3, #1
 800213a:	4622      	mov	r2, r4
 800213c:	4649      	mov	r1, r9
 800213e:	4638      	mov	r0, r7
 8002140:	47c0      	blx	r8
 8002142:	3001      	adds	r0, #1
 8002144:	d0e6      	beq.n	8002114 <_printf_common+0xa4>
 8002146:	3601      	adds	r6, #1
 8002148:	e7d9      	b.n	80020fe <_printf_common+0x8e>
	...

0800214c <_printf_i>:
 800214c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002150:	7e0f      	ldrb	r7, [r1, #24]
 8002152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002154:	2f78      	cmp	r7, #120	; 0x78
 8002156:	4691      	mov	r9, r2
 8002158:	4680      	mov	r8, r0
 800215a:	460c      	mov	r4, r1
 800215c:	469a      	mov	sl, r3
 800215e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002162:	d807      	bhi.n	8002174 <_printf_i+0x28>
 8002164:	2f62      	cmp	r7, #98	; 0x62
 8002166:	d80a      	bhi.n	800217e <_printf_i+0x32>
 8002168:	2f00      	cmp	r7, #0
 800216a:	f000 80d4 	beq.w	8002316 <_printf_i+0x1ca>
 800216e:	2f58      	cmp	r7, #88	; 0x58
 8002170:	f000 80c0 	beq.w	80022f4 <_printf_i+0x1a8>
 8002174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800217c:	e03a      	b.n	80021f4 <_printf_i+0xa8>
 800217e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002182:	2b15      	cmp	r3, #21
 8002184:	d8f6      	bhi.n	8002174 <_printf_i+0x28>
 8002186:	a101      	add	r1, pc, #4	; (adr r1, 800218c <_printf_i+0x40>)
 8002188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800218c:	080021e5 	.word	0x080021e5
 8002190:	080021f9 	.word	0x080021f9
 8002194:	08002175 	.word	0x08002175
 8002198:	08002175 	.word	0x08002175
 800219c:	08002175 	.word	0x08002175
 80021a0:	08002175 	.word	0x08002175
 80021a4:	080021f9 	.word	0x080021f9
 80021a8:	08002175 	.word	0x08002175
 80021ac:	08002175 	.word	0x08002175
 80021b0:	08002175 	.word	0x08002175
 80021b4:	08002175 	.word	0x08002175
 80021b8:	080022fd 	.word	0x080022fd
 80021bc:	08002225 	.word	0x08002225
 80021c0:	080022b7 	.word	0x080022b7
 80021c4:	08002175 	.word	0x08002175
 80021c8:	08002175 	.word	0x08002175
 80021cc:	0800231f 	.word	0x0800231f
 80021d0:	08002175 	.word	0x08002175
 80021d4:	08002225 	.word	0x08002225
 80021d8:	08002175 	.word	0x08002175
 80021dc:	08002175 	.word	0x08002175
 80021e0:	080022bf 	.word	0x080022bf
 80021e4:	682b      	ldr	r3, [r5, #0]
 80021e6:	1d1a      	adds	r2, r3, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	602a      	str	r2, [r5, #0]
 80021ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021f4:	2301      	movs	r3, #1
 80021f6:	e09f      	b.n	8002338 <_printf_i+0x1ec>
 80021f8:	6820      	ldr	r0, [r4, #0]
 80021fa:	682b      	ldr	r3, [r5, #0]
 80021fc:	0607      	lsls	r7, r0, #24
 80021fe:	f103 0104 	add.w	r1, r3, #4
 8002202:	6029      	str	r1, [r5, #0]
 8002204:	d501      	bpl.n	800220a <_printf_i+0xbe>
 8002206:	681e      	ldr	r6, [r3, #0]
 8002208:	e003      	b.n	8002212 <_printf_i+0xc6>
 800220a:	0646      	lsls	r6, r0, #25
 800220c:	d5fb      	bpl.n	8002206 <_printf_i+0xba>
 800220e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002212:	2e00      	cmp	r6, #0
 8002214:	da03      	bge.n	800221e <_printf_i+0xd2>
 8002216:	232d      	movs	r3, #45	; 0x2d
 8002218:	4276      	negs	r6, r6
 800221a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800221e:	485a      	ldr	r0, [pc, #360]	; (8002388 <_printf_i+0x23c>)
 8002220:	230a      	movs	r3, #10
 8002222:	e012      	b.n	800224a <_printf_i+0xfe>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	6820      	ldr	r0, [r4, #0]
 8002228:	1d19      	adds	r1, r3, #4
 800222a:	6029      	str	r1, [r5, #0]
 800222c:	0605      	lsls	r5, r0, #24
 800222e:	d501      	bpl.n	8002234 <_printf_i+0xe8>
 8002230:	681e      	ldr	r6, [r3, #0]
 8002232:	e002      	b.n	800223a <_printf_i+0xee>
 8002234:	0641      	lsls	r1, r0, #25
 8002236:	d5fb      	bpl.n	8002230 <_printf_i+0xe4>
 8002238:	881e      	ldrh	r6, [r3, #0]
 800223a:	4853      	ldr	r0, [pc, #332]	; (8002388 <_printf_i+0x23c>)
 800223c:	2f6f      	cmp	r7, #111	; 0x6f
 800223e:	bf0c      	ite	eq
 8002240:	2308      	moveq	r3, #8
 8002242:	230a      	movne	r3, #10
 8002244:	2100      	movs	r1, #0
 8002246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800224a:	6865      	ldr	r5, [r4, #4]
 800224c:	60a5      	str	r5, [r4, #8]
 800224e:	2d00      	cmp	r5, #0
 8002250:	bfa2      	ittt	ge
 8002252:	6821      	ldrge	r1, [r4, #0]
 8002254:	f021 0104 	bicge.w	r1, r1, #4
 8002258:	6021      	strge	r1, [r4, #0]
 800225a:	b90e      	cbnz	r6, 8002260 <_printf_i+0x114>
 800225c:	2d00      	cmp	r5, #0
 800225e:	d04b      	beq.n	80022f8 <_printf_i+0x1ac>
 8002260:	4615      	mov	r5, r2
 8002262:	fbb6 f1f3 	udiv	r1, r6, r3
 8002266:	fb03 6711 	mls	r7, r3, r1, r6
 800226a:	5dc7      	ldrb	r7, [r0, r7]
 800226c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002270:	4637      	mov	r7, r6
 8002272:	42bb      	cmp	r3, r7
 8002274:	460e      	mov	r6, r1
 8002276:	d9f4      	bls.n	8002262 <_printf_i+0x116>
 8002278:	2b08      	cmp	r3, #8
 800227a:	d10b      	bne.n	8002294 <_printf_i+0x148>
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	07de      	lsls	r6, r3, #31
 8002280:	d508      	bpl.n	8002294 <_printf_i+0x148>
 8002282:	6923      	ldr	r3, [r4, #16]
 8002284:	6861      	ldr	r1, [r4, #4]
 8002286:	4299      	cmp	r1, r3
 8002288:	bfde      	ittt	le
 800228a:	2330      	movle	r3, #48	; 0x30
 800228c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002290:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002294:	1b52      	subs	r2, r2, r5
 8002296:	6122      	str	r2, [r4, #16]
 8002298:	f8cd a000 	str.w	sl, [sp]
 800229c:	464b      	mov	r3, r9
 800229e:	aa03      	add	r2, sp, #12
 80022a0:	4621      	mov	r1, r4
 80022a2:	4640      	mov	r0, r8
 80022a4:	f7ff fee4 	bl	8002070 <_printf_common>
 80022a8:	3001      	adds	r0, #1
 80022aa:	d14a      	bne.n	8002342 <_printf_i+0x1f6>
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	b004      	add	sp, #16
 80022b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	f043 0320 	orr.w	r3, r3, #32
 80022bc:	6023      	str	r3, [r4, #0]
 80022be:	4833      	ldr	r0, [pc, #204]	; (800238c <_printf_i+0x240>)
 80022c0:	2778      	movs	r7, #120	; 0x78
 80022c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	6829      	ldr	r1, [r5, #0]
 80022ca:	061f      	lsls	r7, r3, #24
 80022cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80022d0:	d402      	bmi.n	80022d8 <_printf_i+0x18c>
 80022d2:	065f      	lsls	r7, r3, #25
 80022d4:	bf48      	it	mi
 80022d6:	b2b6      	uxthmi	r6, r6
 80022d8:	07df      	lsls	r7, r3, #31
 80022da:	bf48      	it	mi
 80022dc:	f043 0320 	orrmi.w	r3, r3, #32
 80022e0:	6029      	str	r1, [r5, #0]
 80022e2:	bf48      	it	mi
 80022e4:	6023      	strmi	r3, [r4, #0]
 80022e6:	b91e      	cbnz	r6, 80022f0 <_printf_i+0x1a4>
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	f023 0320 	bic.w	r3, r3, #32
 80022ee:	6023      	str	r3, [r4, #0]
 80022f0:	2310      	movs	r3, #16
 80022f2:	e7a7      	b.n	8002244 <_printf_i+0xf8>
 80022f4:	4824      	ldr	r0, [pc, #144]	; (8002388 <_printf_i+0x23c>)
 80022f6:	e7e4      	b.n	80022c2 <_printf_i+0x176>
 80022f8:	4615      	mov	r5, r2
 80022fa:	e7bd      	b.n	8002278 <_printf_i+0x12c>
 80022fc:	682b      	ldr	r3, [r5, #0]
 80022fe:	6826      	ldr	r6, [r4, #0]
 8002300:	6961      	ldr	r1, [r4, #20]
 8002302:	1d18      	adds	r0, r3, #4
 8002304:	6028      	str	r0, [r5, #0]
 8002306:	0635      	lsls	r5, r6, #24
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	d501      	bpl.n	8002310 <_printf_i+0x1c4>
 800230c:	6019      	str	r1, [r3, #0]
 800230e:	e002      	b.n	8002316 <_printf_i+0x1ca>
 8002310:	0670      	lsls	r0, r6, #25
 8002312:	d5fb      	bpl.n	800230c <_printf_i+0x1c0>
 8002314:	8019      	strh	r1, [r3, #0]
 8002316:	2300      	movs	r3, #0
 8002318:	6123      	str	r3, [r4, #16]
 800231a:	4615      	mov	r5, r2
 800231c:	e7bc      	b.n	8002298 <_printf_i+0x14c>
 800231e:	682b      	ldr	r3, [r5, #0]
 8002320:	1d1a      	adds	r2, r3, #4
 8002322:	602a      	str	r2, [r5, #0]
 8002324:	681d      	ldr	r5, [r3, #0]
 8002326:	6862      	ldr	r2, [r4, #4]
 8002328:	2100      	movs	r1, #0
 800232a:	4628      	mov	r0, r5
 800232c:	f7fd ff58 	bl	80001e0 <memchr>
 8002330:	b108      	cbz	r0, 8002336 <_printf_i+0x1ea>
 8002332:	1b40      	subs	r0, r0, r5
 8002334:	6060      	str	r0, [r4, #4]
 8002336:	6863      	ldr	r3, [r4, #4]
 8002338:	6123      	str	r3, [r4, #16]
 800233a:	2300      	movs	r3, #0
 800233c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002340:	e7aa      	b.n	8002298 <_printf_i+0x14c>
 8002342:	6923      	ldr	r3, [r4, #16]
 8002344:	462a      	mov	r2, r5
 8002346:	4649      	mov	r1, r9
 8002348:	4640      	mov	r0, r8
 800234a:	47d0      	blx	sl
 800234c:	3001      	adds	r0, #1
 800234e:	d0ad      	beq.n	80022ac <_printf_i+0x160>
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	079b      	lsls	r3, r3, #30
 8002354:	d413      	bmi.n	800237e <_printf_i+0x232>
 8002356:	68e0      	ldr	r0, [r4, #12]
 8002358:	9b03      	ldr	r3, [sp, #12]
 800235a:	4298      	cmp	r0, r3
 800235c:	bfb8      	it	lt
 800235e:	4618      	movlt	r0, r3
 8002360:	e7a6      	b.n	80022b0 <_printf_i+0x164>
 8002362:	2301      	movs	r3, #1
 8002364:	4632      	mov	r2, r6
 8002366:	4649      	mov	r1, r9
 8002368:	4640      	mov	r0, r8
 800236a:	47d0      	blx	sl
 800236c:	3001      	adds	r0, #1
 800236e:	d09d      	beq.n	80022ac <_printf_i+0x160>
 8002370:	3501      	adds	r5, #1
 8002372:	68e3      	ldr	r3, [r4, #12]
 8002374:	9903      	ldr	r1, [sp, #12]
 8002376:	1a5b      	subs	r3, r3, r1
 8002378:	42ab      	cmp	r3, r5
 800237a:	dcf2      	bgt.n	8002362 <_printf_i+0x216>
 800237c:	e7eb      	b.n	8002356 <_printf_i+0x20a>
 800237e:	2500      	movs	r5, #0
 8002380:	f104 0619 	add.w	r6, r4, #25
 8002384:	e7f5      	b.n	8002372 <_printf_i+0x226>
 8002386:	bf00      	nop
 8002388:	0800280d 	.word	0x0800280d
 800238c:	0800281e 	.word	0x0800281e

08002390 <__sflush_r>:
 8002390:	898a      	ldrh	r2, [r1, #12]
 8002392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002396:	4605      	mov	r5, r0
 8002398:	0710      	lsls	r0, r2, #28
 800239a:	460c      	mov	r4, r1
 800239c:	d458      	bmi.n	8002450 <__sflush_r+0xc0>
 800239e:	684b      	ldr	r3, [r1, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	dc05      	bgt.n	80023b0 <__sflush_r+0x20>
 80023a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	dc02      	bgt.n	80023b0 <__sflush_r+0x20>
 80023aa:	2000      	movs	r0, #0
 80023ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023b2:	2e00      	cmp	r6, #0
 80023b4:	d0f9      	beq.n	80023aa <__sflush_r+0x1a>
 80023b6:	2300      	movs	r3, #0
 80023b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80023bc:	682f      	ldr	r7, [r5, #0]
 80023be:	6a21      	ldr	r1, [r4, #32]
 80023c0:	602b      	str	r3, [r5, #0]
 80023c2:	d032      	beq.n	800242a <__sflush_r+0x9a>
 80023c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023c6:	89a3      	ldrh	r3, [r4, #12]
 80023c8:	075a      	lsls	r2, r3, #29
 80023ca:	d505      	bpl.n	80023d8 <__sflush_r+0x48>
 80023cc:	6863      	ldr	r3, [r4, #4]
 80023ce:	1ac0      	subs	r0, r0, r3
 80023d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023d2:	b10b      	cbz	r3, 80023d8 <__sflush_r+0x48>
 80023d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023d6:	1ac0      	subs	r0, r0, r3
 80023d8:	2300      	movs	r3, #0
 80023da:	4602      	mov	r2, r0
 80023dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023de:	6a21      	ldr	r1, [r4, #32]
 80023e0:	4628      	mov	r0, r5
 80023e2:	47b0      	blx	r6
 80023e4:	1c43      	adds	r3, r0, #1
 80023e6:	89a3      	ldrh	r3, [r4, #12]
 80023e8:	d106      	bne.n	80023f8 <__sflush_r+0x68>
 80023ea:	6829      	ldr	r1, [r5, #0]
 80023ec:	291d      	cmp	r1, #29
 80023ee:	d82b      	bhi.n	8002448 <__sflush_r+0xb8>
 80023f0:	4a29      	ldr	r2, [pc, #164]	; (8002498 <__sflush_r+0x108>)
 80023f2:	410a      	asrs	r2, r1
 80023f4:	07d6      	lsls	r6, r2, #31
 80023f6:	d427      	bmi.n	8002448 <__sflush_r+0xb8>
 80023f8:	2200      	movs	r2, #0
 80023fa:	6062      	str	r2, [r4, #4]
 80023fc:	04d9      	lsls	r1, r3, #19
 80023fe:	6922      	ldr	r2, [r4, #16]
 8002400:	6022      	str	r2, [r4, #0]
 8002402:	d504      	bpl.n	800240e <__sflush_r+0x7e>
 8002404:	1c42      	adds	r2, r0, #1
 8002406:	d101      	bne.n	800240c <__sflush_r+0x7c>
 8002408:	682b      	ldr	r3, [r5, #0]
 800240a:	b903      	cbnz	r3, 800240e <__sflush_r+0x7e>
 800240c:	6560      	str	r0, [r4, #84]	; 0x54
 800240e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002410:	602f      	str	r7, [r5, #0]
 8002412:	2900      	cmp	r1, #0
 8002414:	d0c9      	beq.n	80023aa <__sflush_r+0x1a>
 8002416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800241a:	4299      	cmp	r1, r3
 800241c:	d002      	beq.n	8002424 <__sflush_r+0x94>
 800241e:	4628      	mov	r0, r5
 8002420:	f7ff fbea 	bl	8001bf8 <_free_r>
 8002424:	2000      	movs	r0, #0
 8002426:	6360      	str	r0, [r4, #52]	; 0x34
 8002428:	e7c0      	b.n	80023ac <__sflush_r+0x1c>
 800242a:	2301      	movs	r3, #1
 800242c:	4628      	mov	r0, r5
 800242e:	47b0      	blx	r6
 8002430:	1c41      	adds	r1, r0, #1
 8002432:	d1c8      	bne.n	80023c6 <__sflush_r+0x36>
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0c5      	beq.n	80023c6 <__sflush_r+0x36>
 800243a:	2b1d      	cmp	r3, #29
 800243c:	d001      	beq.n	8002442 <__sflush_r+0xb2>
 800243e:	2b16      	cmp	r3, #22
 8002440:	d101      	bne.n	8002446 <__sflush_r+0xb6>
 8002442:	602f      	str	r7, [r5, #0]
 8002444:	e7b1      	b.n	80023aa <__sflush_r+0x1a>
 8002446:	89a3      	ldrh	r3, [r4, #12]
 8002448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800244c:	81a3      	strh	r3, [r4, #12]
 800244e:	e7ad      	b.n	80023ac <__sflush_r+0x1c>
 8002450:	690f      	ldr	r7, [r1, #16]
 8002452:	2f00      	cmp	r7, #0
 8002454:	d0a9      	beq.n	80023aa <__sflush_r+0x1a>
 8002456:	0793      	lsls	r3, r2, #30
 8002458:	680e      	ldr	r6, [r1, #0]
 800245a:	bf08      	it	eq
 800245c:	694b      	ldreq	r3, [r1, #20]
 800245e:	600f      	str	r7, [r1, #0]
 8002460:	bf18      	it	ne
 8002462:	2300      	movne	r3, #0
 8002464:	eba6 0807 	sub.w	r8, r6, r7
 8002468:	608b      	str	r3, [r1, #8]
 800246a:	f1b8 0f00 	cmp.w	r8, #0
 800246e:	dd9c      	ble.n	80023aa <__sflush_r+0x1a>
 8002470:	6a21      	ldr	r1, [r4, #32]
 8002472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002474:	4643      	mov	r3, r8
 8002476:	463a      	mov	r2, r7
 8002478:	4628      	mov	r0, r5
 800247a:	47b0      	blx	r6
 800247c:	2800      	cmp	r0, #0
 800247e:	dc06      	bgt.n	800248e <__sflush_r+0xfe>
 8002480:	89a3      	ldrh	r3, [r4, #12]
 8002482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002486:	81a3      	strh	r3, [r4, #12]
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	e78e      	b.n	80023ac <__sflush_r+0x1c>
 800248e:	4407      	add	r7, r0
 8002490:	eba8 0800 	sub.w	r8, r8, r0
 8002494:	e7e9      	b.n	800246a <__sflush_r+0xda>
 8002496:	bf00      	nop
 8002498:	dfbffffe 	.word	0xdfbffffe

0800249c <_fflush_r>:
 800249c:	b538      	push	{r3, r4, r5, lr}
 800249e:	690b      	ldr	r3, [r1, #16]
 80024a0:	4605      	mov	r5, r0
 80024a2:	460c      	mov	r4, r1
 80024a4:	b913      	cbnz	r3, 80024ac <_fflush_r+0x10>
 80024a6:	2500      	movs	r5, #0
 80024a8:	4628      	mov	r0, r5
 80024aa:	bd38      	pop	{r3, r4, r5, pc}
 80024ac:	b118      	cbz	r0, 80024b6 <_fflush_r+0x1a>
 80024ae:	6a03      	ldr	r3, [r0, #32]
 80024b0:	b90b      	cbnz	r3, 80024b6 <_fflush_r+0x1a>
 80024b2:	f7ff fa99 	bl	80019e8 <__sinit>
 80024b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f3      	beq.n	80024a6 <_fflush_r+0xa>
 80024be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80024c0:	07d0      	lsls	r0, r2, #31
 80024c2:	d404      	bmi.n	80024ce <_fflush_r+0x32>
 80024c4:	0599      	lsls	r1, r3, #22
 80024c6:	d402      	bmi.n	80024ce <_fflush_r+0x32>
 80024c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024ca:	f7ff fb92 	bl	8001bf2 <__retarget_lock_acquire_recursive>
 80024ce:	4628      	mov	r0, r5
 80024d0:	4621      	mov	r1, r4
 80024d2:	f7ff ff5d 	bl	8002390 <__sflush_r>
 80024d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024d8:	07da      	lsls	r2, r3, #31
 80024da:	4605      	mov	r5, r0
 80024dc:	d4e4      	bmi.n	80024a8 <_fflush_r+0xc>
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	059b      	lsls	r3, r3, #22
 80024e2:	d4e1      	bmi.n	80024a8 <_fflush_r+0xc>
 80024e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024e6:	f7ff fb85 	bl	8001bf4 <__retarget_lock_release_recursive>
 80024ea:	e7dd      	b.n	80024a8 <_fflush_r+0xc>

080024ec <__swbuf_r>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	460e      	mov	r6, r1
 80024f0:	4614      	mov	r4, r2
 80024f2:	4605      	mov	r5, r0
 80024f4:	b118      	cbz	r0, 80024fe <__swbuf_r+0x12>
 80024f6:	6a03      	ldr	r3, [r0, #32]
 80024f8:	b90b      	cbnz	r3, 80024fe <__swbuf_r+0x12>
 80024fa:	f7ff fa75 	bl	80019e8 <__sinit>
 80024fe:	69a3      	ldr	r3, [r4, #24]
 8002500:	60a3      	str	r3, [r4, #8]
 8002502:	89a3      	ldrh	r3, [r4, #12]
 8002504:	071a      	lsls	r2, r3, #28
 8002506:	d525      	bpl.n	8002554 <__swbuf_r+0x68>
 8002508:	6923      	ldr	r3, [r4, #16]
 800250a:	b31b      	cbz	r3, 8002554 <__swbuf_r+0x68>
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	6922      	ldr	r2, [r4, #16]
 8002510:	1a98      	subs	r0, r3, r2
 8002512:	6963      	ldr	r3, [r4, #20]
 8002514:	b2f6      	uxtb	r6, r6
 8002516:	4283      	cmp	r3, r0
 8002518:	4637      	mov	r7, r6
 800251a:	dc04      	bgt.n	8002526 <__swbuf_r+0x3a>
 800251c:	4621      	mov	r1, r4
 800251e:	4628      	mov	r0, r5
 8002520:	f7ff ffbc 	bl	800249c <_fflush_r>
 8002524:	b9e0      	cbnz	r0, 8002560 <__swbuf_r+0x74>
 8002526:	68a3      	ldr	r3, [r4, #8]
 8002528:	3b01      	subs	r3, #1
 800252a:	60a3      	str	r3, [r4, #8]
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	6022      	str	r2, [r4, #0]
 8002532:	701e      	strb	r6, [r3, #0]
 8002534:	6962      	ldr	r2, [r4, #20]
 8002536:	1c43      	adds	r3, r0, #1
 8002538:	429a      	cmp	r2, r3
 800253a:	d004      	beq.n	8002546 <__swbuf_r+0x5a>
 800253c:	89a3      	ldrh	r3, [r4, #12]
 800253e:	07db      	lsls	r3, r3, #31
 8002540:	d506      	bpl.n	8002550 <__swbuf_r+0x64>
 8002542:	2e0a      	cmp	r6, #10
 8002544:	d104      	bne.n	8002550 <__swbuf_r+0x64>
 8002546:	4621      	mov	r1, r4
 8002548:	4628      	mov	r0, r5
 800254a:	f7ff ffa7 	bl	800249c <_fflush_r>
 800254e:	b938      	cbnz	r0, 8002560 <__swbuf_r+0x74>
 8002550:	4638      	mov	r0, r7
 8002552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002554:	4621      	mov	r1, r4
 8002556:	4628      	mov	r0, r5
 8002558:	f000 f806 	bl	8002568 <__swsetup_r>
 800255c:	2800      	cmp	r0, #0
 800255e:	d0d5      	beq.n	800250c <__swbuf_r+0x20>
 8002560:	f04f 37ff 	mov.w	r7, #4294967295
 8002564:	e7f4      	b.n	8002550 <__swbuf_r+0x64>
	...

08002568 <__swsetup_r>:
 8002568:	b538      	push	{r3, r4, r5, lr}
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <__swsetup_r+0xac>)
 800256c:	4605      	mov	r5, r0
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	460c      	mov	r4, r1
 8002572:	b118      	cbz	r0, 800257c <__swsetup_r+0x14>
 8002574:	6a03      	ldr	r3, [r0, #32]
 8002576:	b90b      	cbnz	r3, 800257c <__swsetup_r+0x14>
 8002578:	f7ff fa36 	bl	80019e8 <__sinit>
 800257c:	89a3      	ldrh	r3, [r4, #12]
 800257e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002582:	0718      	lsls	r0, r3, #28
 8002584:	d422      	bmi.n	80025cc <__swsetup_r+0x64>
 8002586:	06d9      	lsls	r1, r3, #27
 8002588:	d407      	bmi.n	800259a <__swsetup_r+0x32>
 800258a:	2309      	movs	r3, #9
 800258c:	602b      	str	r3, [r5, #0]
 800258e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002592:	81a3      	strh	r3, [r4, #12]
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	e034      	b.n	8002604 <__swsetup_r+0x9c>
 800259a:	0758      	lsls	r0, r3, #29
 800259c:	d512      	bpl.n	80025c4 <__swsetup_r+0x5c>
 800259e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025a0:	b141      	cbz	r1, 80025b4 <__swsetup_r+0x4c>
 80025a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025a6:	4299      	cmp	r1, r3
 80025a8:	d002      	beq.n	80025b0 <__swsetup_r+0x48>
 80025aa:	4628      	mov	r0, r5
 80025ac:	f7ff fb24 	bl	8001bf8 <_free_r>
 80025b0:	2300      	movs	r3, #0
 80025b2:	6363      	str	r3, [r4, #52]	; 0x34
 80025b4:	89a3      	ldrh	r3, [r4, #12]
 80025b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80025ba:	81a3      	strh	r3, [r4, #12]
 80025bc:	2300      	movs	r3, #0
 80025be:	6063      	str	r3, [r4, #4]
 80025c0:	6923      	ldr	r3, [r4, #16]
 80025c2:	6023      	str	r3, [r4, #0]
 80025c4:	89a3      	ldrh	r3, [r4, #12]
 80025c6:	f043 0308 	orr.w	r3, r3, #8
 80025ca:	81a3      	strh	r3, [r4, #12]
 80025cc:	6923      	ldr	r3, [r4, #16]
 80025ce:	b94b      	cbnz	r3, 80025e4 <__swsetup_r+0x7c>
 80025d0:	89a3      	ldrh	r3, [r4, #12]
 80025d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025da:	d003      	beq.n	80025e4 <__swsetup_r+0x7c>
 80025dc:	4621      	mov	r1, r4
 80025de:	4628      	mov	r0, r5
 80025e0:	f000 f850 	bl	8002684 <__smakebuf_r>
 80025e4:	89a0      	ldrh	r0, [r4, #12]
 80025e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025ea:	f010 0301 	ands.w	r3, r0, #1
 80025ee:	d00a      	beq.n	8002606 <__swsetup_r+0x9e>
 80025f0:	2300      	movs	r3, #0
 80025f2:	60a3      	str	r3, [r4, #8]
 80025f4:	6963      	ldr	r3, [r4, #20]
 80025f6:	425b      	negs	r3, r3
 80025f8:	61a3      	str	r3, [r4, #24]
 80025fa:	6923      	ldr	r3, [r4, #16]
 80025fc:	b943      	cbnz	r3, 8002610 <__swsetup_r+0xa8>
 80025fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002602:	d1c4      	bne.n	800258e <__swsetup_r+0x26>
 8002604:	bd38      	pop	{r3, r4, r5, pc}
 8002606:	0781      	lsls	r1, r0, #30
 8002608:	bf58      	it	pl
 800260a:	6963      	ldrpl	r3, [r4, #20]
 800260c:	60a3      	str	r3, [r4, #8]
 800260e:	e7f4      	b.n	80025fa <__swsetup_r+0x92>
 8002610:	2000      	movs	r0, #0
 8002612:	e7f7      	b.n	8002604 <__swsetup_r+0x9c>
 8002614:	20000070 	.word	0x20000070

08002618 <_sbrk_r>:
 8002618:	b538      	push	{r3, r4, r5, lr}
 800261a:	4d06      	ldr	r5, [pc, #24]	; (8002634 <_sbrk_r+0x1c>)
 800261c:	2300      	movs	r3, #0
 800261e:	4604      	mov	r4, r0
 8002620:	4608      	mov	r0, r1
 8002622:	602b      	str	r3, [r5, #0]
 8002624:	f7ff f8f4 	bl	8001810 <_sbrk>
 8002628:	1c43      	adds	r3, r0, #1
 800262a:	d102      	bne.n	8002632 <_sbrk_r+0x1a>
 800262c:	682b      	ldr	r3, [r5, #0]
 800262e:	b103      	cbz	r3, 8002632 <_sbrk_r+0x1a>
 8002630:	6023      	str	r3, [r4, #0]
 8002632:	bd38      	pop	{r3, r4, r5, pc}
 8002634:	20000210 	.word	0x20000210

08002638 <__swhatbuf_r>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	460c      	mov	r4, r1
 800263c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002640:	2900      	cmp	r1, #0
 8002642:	b096      	sub	sp, #88	; 0x58
 8002644:	4615      	mov	r5, r2
 8002646:	461e      	mov	r6, r3
 8002648:	da0d      	bge.n	8002666 <__swhatbuf_r+0x2e>
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002650:	f04f 0100 	mov.w	r1, #0
 8002654:	bf0c      	ite	eq
 8002656:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800265a:	2340      	movne	r3, #64	; 0x40
 800265c:	2000      	movs	r0, #0
 800265e:	6031      	str	r1, [r6, #0]
 8002660:	602b      	str	r3, [r5, #0]
 8002662:	b016      	add	sp, #88	; 0x58
 8002664:	bd70      	pop	{r4, r5, r6, pc}
 8002666:	466a      	mov	r2, sp
 8002668:	f000 f848 	bl	80026fc <_fstat_r>
 800266c:	2800      	cmp	r0, #0
 800266e:	dbec      	blt.n	800264a <__swhatbuf_r+0x12>
 8002670:	9901      	ldr	r1, [sp, #4]
 8002672:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002676:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800267a:	4259      	negs	r1, r3
 800267c:	4159      	adcs	r1, r3
 800267e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002682:	e7eb      	b.n	800265c <__swhatbuf_r+0x24>

08002684 <__smakebuf_r>:
 8002684:	898b      	ldrh	r3, [r1, #12]
 8002686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002688:	079d      	lsls	r5, r3, #30
 800268a:	4606      	mov	r6, r0
 800268c:	460c      	mov	r4, r1
 800268e:	d507      	bpl.n	80026a0 <__smakebuf_r+0x1c>
 8002690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002694:	6023      	str	r3, [r4, #0]
 8002696:	6123      	str	r3, [r4, #16]
 8002698:	2301      	movs	r3, #1
 800269a:	6163      	str	r3, [r4, #20]
 800269c:	b002      	add	sp, #8
 800269e:	bd70      	pop	{r4, r5, r6, pc}
 80026a0:	ab01      	add	r3, sp, #4
 80026a2:	466a      	mov	r2, sp
 80026a4:	f7ff ffc8 	bl	8002638 <__swhatbuf_r>
 80026a8:	9900      	ldr	r1, [sp, #0]
 80026aa:	4605      	mov	r5, r0
 80026ac:	4630      	mov	r0, r6
 80026ae:	f7ff fb0f 	bl	8001cd0 <_malloc_r>
 80026b2:	b948      	cbnz	r0, 80026c8 <__smakebuf_r+0x44>
 80026b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026b8:	059a      	lsls	r2, r3, #22
 80026ba:	d4ef      	bmi.n	800269c <__smakebuf_r+0x18>
 80026bc:	f023 0303 	bic.w	r3, r3, #3
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	81a3      	strh	r3, [r4, #12]
 80026c6:	e7e3      	b.n	8002690 <__smakebuf_r+0xc>
 80026c8:	89a3      	ldrh	r3, [r4, #12]
 80026ca:	6020      	str	r0, [r4, #0]
 80026cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d0:	81a3      	strh	r3, [r4, #12]
 80026d2:	9b00      	ldr	r3, [sp, #0]
 80026d4:	6163      	str	r3, [r4, #20]
 80026d6:	9b01      	ldr	r3, [sp, #4]
 80026d8:	6120      	str	r0, [r4, #16]
 80026da:	b15b      	cbz	r3, 80026f4 <__smakebuf_r+0x70>
 80026dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026e0:	4630      	mov	r0, r6
 80026e2:	f000 f81d 	bl	8002720 <_isatty_r>
 80026e6:	b128      	cbz	r0, 80026f4 <__smakebuf_r+0x70>
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	81a3      	strh	r3, [r4, #12]
 80026f4:	89a3      	ldrh	r3, [r4, #12]
 80026f6:	431d      	orrs	r5, r3
 80026f8:	81a5      	strh	r5, [r4, #12]
 80026fa:	e7cf      	b.n	800269c <__smakebuf_r+0x18>

080026fc <_fstat_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4d07      	ldr	r5, [pc, #28]	; (800271c <_fstat_r+0x20>)
 8002700:	2300      	movs	r3, #0
 8002702:	4604      	mov	r4, r0
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	602b      	str	r3, [r5, #0]
 800270a:	f7ff f858 	bl	80017be <_fstat>
 800270e:	1c43      	adds	r3, r0, #1
 8002710:	d102      	bne.n	8002718 <_fstat_r+0x1c>
 8002712:	682b      	ldr	r3, [r5, #0]
 8002714:	b103      	cbz	r3, 8002718 <_fstat_r+0x1c>
 8002716:	6023      	str	r3, [r4, #0]
 8002718:	bd38      	pop	{r3, r4, r5, pc}
 800271a:	bf00      	nop
 800271c:	20000210 	.word	0x20000210

08002720 <_isatty_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4d06      	ldr	r5, [pc, #24]	; (800273c <_isatty_r+0x1c>)
 8002724:	2300      	movs	r3, #0
 8002726:	4604      	mov	r4, r0
 8002728:	4608      	mov	r0, r1
 800272a:	602b      	str	r3, [r5, #0]
 800272c:	f7ff f857 	bl	80017de <_isatty>
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	d102      	bne.n	800273a <_isatty_r+0x1a>
 8002734:	682b      	ldr	r3, [r5, #0]
 8002736:	b103      	cbz	r3, 800273a <_isatty_r+0x1a>
 8002738:	6023      	str	r3, [r4, #0]
 800273a:	bd38      	pop	{r3, r4, r5, pc}
 800273c:	20000210 	.word	0x20000210

08002740 <_init>:
 8002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002742:	bf00      	nop
 8002744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002746:	bc08      	pop	{r3}
 8002748:	469e      	mov	lr, r3
 800274a:	4770      	bx	lr

0800274c <_fini>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	bf00      	nop
 8002750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002752:	bc08      	pop	{r3}
 8002754:	469e      	mov	lr, r3
 8002756:	4770      	bx	lr
